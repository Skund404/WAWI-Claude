# Path: gui/base_view.py.new
"""
Base view that all other views will inherit from.
This provides common functionality for all views.
"""
import tkinter as tk
from tkinter import ttk, messagebox
import logging

logger = logging.getLogger(__name__)

class BaseView(ttk.Frame):
    """
    Base view class that provides common functionality for all views.
    """

    def __init__(self, parent, app):
        """
        Initialize the base view.

        Args:
            parent: Parent widget
            app: Application instance
        """
        super().__init__(parent)
        self.parent = parent
        self.app = app
        self.pack(fill=tk.BOTH, expand=True)

        logger.debug(f"BaseView initialized with app: {app}")

    def get_service(self, service_type):
        """
        Get a service from the application.

        Args:
            service_type: Type of service to retrieve

        Returns:
            Service instance
        """
        try:
            if self.app is not None and hasattr(self.app, 'get_service'):
                service = self.app.get_service(service_type)
                logger.debug(f"Service retrieved: {service_type}")
                return service
            else:
                logger.warning("App not available or doesn't have get_service method")
                return None
        except Exception as e:
            logger.error(f"Error getting service {service_type}: {str(e)}")
            return None

    def load_data(self):
        """Load data for the view. To be implemented by subclasses."""
        pass

    def save(self):
        """Save data from the view. To be implemented by subclasses."""
        pass

    def undo(self):
        """Undo the last action. To be implemented by subclasses."""
        pass

    def redo(self):
        """Redo the last undone action. To be implemented by subclasses."""
        pass

    def show_error(self, title, message):
        """
        Show an error message.

        Args:
            title: Title of the message
            message: Error message
        """
        messagebox.showerror(title, message)
        logger.error(f"Error: {title} - {message}")

    def show_info(self, title, message):
        """
        Show an information message.

        Args:
            title: Title of the message
            message: Information message
        """
        messagebox.showinfo(title, message)
        logger.info(f"Info: {title} - {message}")

    def show_warning(self, title, message):
        """
        Show a warning message.

        Args:
            title: Title of the message
            message: Warning message
        """
        messagebox.showwarning(title, message)
        logger.warning(f"Warning: {title} - {message}")

    def confirm(self, title, message):
        """
        Show a confirmation dialog.

        Args:
            title: Title of the message
            message: Confirmation message

        Returns:
            bool: True if the user confirmed, False otherwise
        """
        return messagebox.askyesno(title, message)

    def set_status(self, message):
        """
        Set the status message in the status bar.

        Args:
            message: Status message
        """
        try:
            # Try to set the status in the main window if it has a set_status method
            if hasattr(self.parent, 'set_status'):
                self.parent.set_status(message)
            elif hasattr(self.app, 'main_window') and hasattr(self.app.main_window, 'set_status'):
                self.app.main_window.set_status(message)
        except Exception as e:
            logger.warning(f"Could not set status: {str(e)}")

# Try to backup the existing file if it exists
if __name__ == "__main__":
    import os
    import shutil

    base_view_path = os.path.join(os.path.dirname(__file__), "base_view.py")
    backup_path = base_view_path + ".bak"

    # Backup the existing file if it exists
    if os.path.exists(base_view_path):
        try:
            shutil.copy2(base_view_path, backup_path)
            print(f"Created backup of original base_view.py at {backup_path}")
        except Exception as e:
            print(f"Could not create backup: {str(e)}")

    # Write the new file
    try:
        with open(base_view_path, 'w') as f:
            f.write(__doc__)
            lines = []
            with open(__file__, 'r') as this_file:
                lines = this_file.readlines()

            # Skip the first line (path) and write the rest
            f.writelines(lines[1:])

        print(f"Updated {base_view_path} successfully")
    except Exception as e:
        print(f"Error updating base_view.py: {str(e)}")
{
  "project_name": "store_management",
  "total_files": 175,
  "files": {
    "anotator.py": {
      "path": "anotator.py",
      "classes": [
        {
          "name": "FunctionContext",
          "methods": [],
          "base_classes": []
        },
        {
          "name": "CodeAnnotator",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self"
              ]
            },
            {
              "name": "infer_type",
              "args": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_FunctionDef",
              "args": [
                "self",
                "node"
              ]
            },
            {
              "name": "leave_FunctionDef",
              "args": [
                "self",
                "original_node",
                "updated_node"
              ]
            },
            {
              "name": "leave_Param",
              "args": [
                "self",
                "original_node",
                "updated_node"
              ]
            }
          ],
          "base_classes": [
            "cst.CSTTransformer"
          ]
        },
        {
          "name": "DocstringGenerator",
          "methods": [
            {
              "name": "leave_FunctionDef",
              "args": [
                "self",
                "original_node",
                "updated_node"
              ]
            }
          ],
          "base_classes": [
            "cst.CSTTransformer"
          ]
        },
        {
          "name": "ProjectAnnotator",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "process_file",
              "args": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "process_project",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": [
        {
          "name": "annotate_project",
          "args": [
            "project_path"
          ]
        }
      ]
    },
    "application.py": {
      "path": "application.py",
      "classes": [
        {
          "name": "Application",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self"
              ]
            },
            {
              "name": "get_service",
              "args": [
                "self",
                "service_type"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "config.py": {
      "path": "config.py",
      "classes": [],
      "functions": [
        {
          "name": "get_database_path",
          "args": []
        }
      ]
    },
    "import_test.py": {
      "path": "import_test.py",
      "classes": [],
      "functions": []
    },
    "main.py": {
      "path": "main.py",
      "classes": [],
      "functions": [
        {
          "name": "setup_logging",
          "args": []
        },
        {
          "name": "main",
          "args": []
        }
      ]
    },
    "project_analyzer.py": {
      "path": "project_analyzer.py",
      "classes": [
        {
          "name": "FunctionInfo",
          "methods": [],
          "base_classes": []
        },
        {
          "name": "ClassInfo",
          "methods": [],
          "base_classes": []
        },
        {
          "name": "FileInfo",
          "methods": [],
          "base_classes": []
        },
        {
          "name": "ProjectAnalyzer",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "analyze_project",
              "args": [
                "self"
              ]
            },
            {
              "name": "analyze_file",
              "args": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_extract_function_info",
              "args": [
                "self",
                "node"
              ]
            },
            {
              "name": "_extract_class_info",
              "args": [
                "self",
                "node"
              ]
            },
            {
              "name": "generate_summary",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": [
        {
          "name": "format_for_chat",
          "args": [
            "summary"
          ]
        },
        {
          "name": "analyze_project",
          "args": [
            "project_path"
          ]
        }
      ]
    },
    "project_analyzer_lightweight.py": {
      "path": "project_analyzer_lightweight.py",
      "classes": [
        {
          "name": "FunctionInfo",
          "methods": [],
          "base_classes": []
        },
        {
          "name": "ClassInfo",
          "methods": [],
          "base_classes": []
        },
        {
          "name": "FileInfo",
          "methods": [],
          "base_classes": []
        },
        {
          "name": "ProjectAnalyzer",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "analyze_project",
              "args": [
                "self"
              ]
            },
            {
              "name": "analyze_file",
              "args": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_extract_function_info",
              "args": [
                "self",
                "node"
              ]
            },
            {
              "name": "_extract_class_info",
              "args": [
                "self",
                "node"
              ]
            },
            {
              "name": "generate_summary",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": [
        {
          "name": "format_for_chat",
          "args": [
            "summary"
          ]
        },
        {
          "name": "analyze_project",
          "args": [
            "project_path"
          ]
        }
      ]
    },
    "setup.py": {
      "path": "setup.py",
      "classes": [],
      "functions": []
    },
    "tkinter_test.py": {
      "path": "tkinter_test.py",
      "classes": [],
      "functions": [
        {
          "name": "print_import_chain",
          "args": []
        },
        {
          "name": "test_tkinter",
          "args": []
        }
      ]
    },
    "__init__.py": {
      "path": "__init__.py",
      "classes": [],
      "functions": []
    },
    "alembic\\env.py": {
      "path": "alembic\\env.py",
      "classes": [],
      "functions": [
        {
          "name": "run_migrations_offline",
          "args": []
        },
        {
          "name": "run_migrations_online",
          "args": []
        }
      ]
    },
    "config\\application_config.py": {
      "path": "config\\application_config.py",
      "classes": [
        {
          "name": "ApplicationConfig",
          "methods": [
            {
              "name": "__new__",
              "args": [
                "cls"
              ]
            },
            {
              "name": "__init__",
              "args": [
                "self"
              ]
            },
            {
              "name": "_load_config",
              "args": [
                "self"
              ]
            },
            {
              "name": "_get_config_dir",
              "args": [
                "self"
              ]
            },
            {
              "name": "_get_config_path",
              "args": [
                "self"
              ]
            },
            {
              "name": "_merge_config",
              "args": [
                "self",
                "config"
              ]
            },
            {
              "name": "_load_from_env",
              "args": [
                "self"
              ]
            },
            {
              "name": "get",
              "args": [
                "self"
              ]
            },
            {
              "name": "set",
              "args": [
                "self",
                "value"
              ]
            },
            {
              "name": "save",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "config\\environment.py": {
      "path": "config\\environment.py",
      "classes": [
        {
          "name": "EnvironmentManager",
          "methods": [
            {
              "name": "__new__",
              "args": [
                "cls"
              ]
            },
            {
              "name": "_initialize",
              "args": [
                "self"
              ]
            },
            {
              "name": "get",
              "args": [
                "key",
                "default"
              ]
            },
            {
              "name": "is_debug",
              "args": []
            },
            {
              "name": "get_log_level",
              "args": []
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "config\\settings.py": {
      "path": "config\\settings.py",
      "classes": [],
      "functions": [
        {
          "name": "_find_project_root",
          "args": []
        },
        {
          "name": "get_database_path",
          "args": []
        },
        {
          "name": "get_log_path",
          "args": []
        },
        {
          "name": "get_backup_path",
          "args": []
        },
        {
          "name": "get_config_path",
          "args": []
        }
      ]
    },
    "config\\__init__.py": {
      "path": "config\\__init__.py",
      "classes": [],
      "functions": []
    },
    "database\\base.py": {
      "path": "database\\base.py",
      "classes": [
        {
          "name": "BaseModel",
          "methods": [
            {
              "name": "__repr__",
              "args": [
                "self"
              ]
            },
            {
              "name": "to_dict",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": [
            "Base"
          ]
        }
      ],
      "functions": []
    },
    "database\\config.py": {
      "path": "database\\config.py",
      "classes": [],
      "functions": [
        {
          "name": "get_database_url",
          "args": [
            "config"
          ]
        },
        {
          "name": "_find_project_root",
          "args": []
        },
        {
          "name": "get_database_config",
          "args": []
        }
      ]
    },
    "database\\initialize.py": {
      "path": "database\\initialize.py",
      "classes": [],
      "functions": [
        {
          "name": "check_column_exists",
          "args": [
            "table_name",
            "column_name"
          ]
        },
        {
          "name": "migrate_storage_table",
          "args": []
        },
        {
          "name": "add_initial_data",
          "args": []
        },
        {
          "name": "initialize_database",
          "args": [
            "drop_existing"
          ]
        }
      ]
    },
    "database\\session.py": {
      "path": "database\\session.py",
      "classes": [],
      "functions": [
        {
          "name": "init_database",
          "args": [
            "db_url"
          ]
        },
        {
          "name": "get_db_session",
          "args": []
        },
        {
          "name": "close_db_session",
          "args": []
        }
      ]
    },
    "database\\__init__.py": {
      "path": "database\\__init__.py",
      "classes": [],
      "functions": [
        {
          "name": "initialize_database",
          "args": [
            "drop_existing"
          ]
        },
        {
          "name": "_ensure_all_models_loaded",
          "args": []
        },
        {
          "name": "add_initial_data",
          "args": [
            "engine"
          ]
        }
      ]
    },
    "di\\config.py": {
      "path": "di\\config.py",
      "classes": [
        {
          "name": "ApplicationConfig",
          "methods": [
            {
              "name": "configure_container",
              "args": [
                "cls"
              ]
            },
            {
              "name": "_register_services",
              "args": [
                "cls",
                "container"
              ]
            },
            {
              "name": "get_service",
              "args": [
                "cls",
                "container",
                "service_type"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "di\\container.py": {
      "path": "di\\container.py",
      "classes": [
        {
          "name": "DependencyContainer",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self"
              ]
            },
            {
              "name": "register",
              "args": [
                "self",
                "interface_type",
                "implementation_factory",
                "singleton"
              ]
            },
            {
              "name": "resolve",
              "args": [
                "self",
                "interface_type"
              ]
            },
            {
              "name": "is_registered",
              "args": [
                "self",
                "interface_type"
              ]
            },
            {
              "name": "get_service",
              "args": [
                "self",
                "interface_type"
              ]
            },
            {
              "name": "clear",
              "args": [
                "self"
              ]
            },
            {
              "name": "__repr__",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "di\\service.py": {
      "path": "di\\service.py",
      "classes": [
        {
          "name": "Service",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "container"
              ]
            },
            {
              "name": "get_dependency",
              "args": [
                "self",
                "dependency_type"
              ]
            }
          ],
          "base_classes": [
            "abc.ABC"
          ]
        }
      ],
      "functions": []
    },
    "di\\__init__.py": {
      "path": "di\\__init__.py",
      "classes": [],
      "functions": []
    },
    "gui\\base_view.py": {
      "path": "gui\\base_view.py",
      "classes": [
        {
          "name": "BaseView",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "parent",
                "app"
              ]
            },
            {
              "name": "get_service",
              "args": [
                "self",
                "service_type"
              ]
            },
            {
              "name": "load_data",
              "args": [
                "self"
              ]
            },
            {
              "name": "save",
              "args": [
                "self"
              ]
            },
            {
              "name": "undo",
              "args": [
                "self"
              ]
            },
            {
              "name": "redo",
              "args": [
                "self"
              ]
            },
            {
              "name": "show_error",
              "args": [
                "self",
                "title",
                "message"
              ]
            },
            {
              "name": "show_info",
              "args": [
                "self",
                "title",
                "message"
              ]
            },
            {
              "name": "show_warning",
              "args": [
                "self",
                "title",
                "message"
              ]
            },
            {
              "name": "confirm",
              "args": [
                "self",
                "title",
                "message"
              ]
            },
            {
              "name": "set_status",
              "args": [
                "self",
                "message"
              ]
            }
          ],
          "base_classes": [
            "ttk.Frame"
          ]
        }
      ],
      "functions": []
    },
    "gui\\main_window.py": {
      "path": "gui\\main_window.py",
      "classes": [
        {
          "name": "MainWindow",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "root",
                "app"
              ]
            },
            {
              "name": "_create_menu",
              "args": [
                "self"
              ]
            },
            {
              "name": "_create_main_notebook",
              "args": [
                "self"
              ]
            },
            {
              "name": "_create_status_bar",
              "args": [
                "self"
              ]
            },
            {
              "name": "_bind_global_shortcuts",
              "args": [
                "self"
              ]
            },
            {
              "name": "set_status",
              "args": [
                "self",
                "message"
              ]
            },
            {
              "name": "_on_new",
              "args": [
                "self",
                "event"
              ]
            },
            {
              "name": "_on_open",
              "args": [
                "self",
                "event"
              ]
            },
            {
              "name": "_on_save",
              "args": [
                "self",
                "event"
              ]
            },
            {
              "name": "_on_undo",
              "args": [
                "self",
                "event"
              ]
            },
            {
              "name": "_on_redo",
              "args": [
                "self",
                "event"
              ]
            },
            {
              "name": "_get_current_view",
              "args": [
                "self"
              ]
            },
            {
              "name": "_on_exit",
              "args": [
                "self"
              ]
            },
            {
              "name": "run",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "gui\\__init__.py": {
      "path": "gui\\__init__.py",
      "classes": [],
      "functions": []
    },
    "modules\\__init__.py": {
      "path": "modules\\__init__.py",
      "classes": [],
      "functions": []
    },
    "services\\inventory_service.py": {
      "path": "services\\inventory_service.py",
      "classes": [
        {
          "name": "InventoryService",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self"
              ]
            },
            {
              "name": "update_part_stock",
              "args": [
                "self",
                "part_id",
                "quantity_change",
                "transaction_type",
                "notes"
              ]
            },
            {
              "name": "update_leather_area",
              "args": [
                "self",
                "leather_id",
                "area_change",
                "transaction_type",
                "notes",
                "wastage"
              ]
            },
            {
              "name": "get_low_stock_parts",
              "args": [
                "self",
                "include_out_of_stock"
              ]
            },
            {
              "name": "get_low_stock_leather",
              "args": [
                "self",
                "include_out_of_stock"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "services\\order_service.py": {
      "path": "services\\order_service.py",
      "classes": [
        {
          "name": "OrderService",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self"
              ]
            },
            {
              "name": "create_order",
              "args": [
                "self",
                "order_data",
                "items"
              ]
            },
            {
              "name": "update_order_status",
              "args": [
                "self",
                "order_id",
                "status"
              ]
            },
            {
              "name": "_is_valid_status_transition",
              "args": [
                "self",
                "current_status",
                "new_status"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "services\\recipe_service.py": {
      "path": "services\\recipe_service.py",
      "classes": [
        {
          "name": "RecipeService",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self"
              ]
            },
            {
              "name": "create_recipe",
              "args": [
                "self",
                "recipe_data",
                "items"
              ]
            },
            {
              "name": "check_materials_availability",
              "args": [
                "self",
                "recipe_id",
                "quantity"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "services\\shopping_list_service.py": {
      "path": "services\\shopping_list_service.py",
      "classes": [
        {
          "name": "ShoppingListService",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self"
              ]
            },
            {
              "name": "create_shopping_list",
              "args": [
                "self",
                "list_data",
                "items"
              ]
            },
            {
              "name": "add_item_to_list",
              "args": [
                "self",
                "list_id",
                "item_data"
              ]
            },
            {
              "name": "mark_item_purchased",
              "args": [
                "self",
                "item_id",
                "purchase_data"
              ]
            },
            {
              "name": "get_pending_items_by_supplier",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "services\\storage_service.py": {
      "path": "services\\storage_service.py",
      "classes": [
        {
          "name": "StorageService",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "db_manager"
              ]
            },
            {
              "name": "get_all_storage_locations",
              "args": [
                "self"
              ]
            },
            {
              "name": "get_storage_by_id",
              "args": [
                "self",
                "storage_id"
              ]
            },
            {
              "name": "_to_dict",
              "args": [
                "self",
                "storage"
              ]
            },
            {
              "name": "_product_to_dict",
              "args": [
                "self",
                "product"
              ]
            }
          ],
          "base_classes": [
            "IStorageService"
          ]
        }
      ],
      "functions": []
    },
    "services\\__init__.py": {
      "path": "services\\__init__.py",
      "classes": [],
      "functions": []
    },
    "src\\database_init.py": {
      "path": "src\\database_init.py",
      "classes": [],
      "functions": [
        {
          "name": "init_database",
          "args": []
        }
      ]
    },
    "src\\__init__.py": {
      "path": "src\\__init__.py",
      "classes": [],
      "functions": []
    },
    "tests\\test_storage.py": {
      "path": "tests\\test_storage.py",
      "classes": [],
      "functions": [
        {
          "name": "test_storage_operations",
          "args": []
        }
      ]
    },
    "tests\\__init__.py": {
      "path": "tests\\__init__.py",
      "classes": [],
      "functions": []
    },
    "tools\\run_migration.py": {
      "path": "tools\\run_migration.py",
      "classes": [],
      "functions": [
        {
          "name": "setup_logging",
          "args": []
        },
        {
          "name": "run_migrations",
          "args": [
            "db_url",
            "drop_existing"
          ]
        },
        {
          "name": "main",
          "args": []
        }
      ]
    },
    "tools\\__init__.py": {
      "path": "tools\\__init__.py",
      "classes": [],
      "functions": []
    },
    "utils\\backup.py": {
      "path": "utils\\backup.py",
      "classes": [
        {
          "name": "DatabaseBackup",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_backup",
              "args": [
                "self",
                "operation"
              ]
            },
            {
              "name": "restore_backup",
              "args": [
                "self",
                "backup_path"
              ]
            },
            {
              "name": "list_backups",
              "args": [
                "self"
              ]
            },
            {
              "name": "cleanup_old_backups",
              "args": [
                "self",
                "keep_days"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "utils\\database_utilities.py": {
      "path": "utils\\database_utilities.py",
      "classes": [
        {
          "name": "DatabaseUtilities",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "export_database",
              "args": [
                "self",
                "export_path"
              ]
            },
            {
              "name": "import_database",
              "args": [
                "self",
                "import_path"
              ]
            },
            {
              "name": "export_schema",
              "args": [
                "self"
              ]
            },
            {
              "name": "optimize_database",
              "args": [
                "self"
              ]
            },
            {
              "name": "verify_database",
              "args": [
                "self"
              ]
            },
            {
              "name": "generate_report",
              "args": [
                "self",
                "report_type"
              ]
            },
            {
              "name": "_generate_inventory_report",
              "args": [
                "self",
                "cursor"
              ]
            },
            {
              "name": "_generate_orders_report",
              "args": [
                "self",
                "cursor"
              ]
            },
            {
              "name": "_generate_suppliers_report",
              "args": [
                "self",
                "cursor"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "utils\\error_handler.py": {
      "path": "utils\\error_handler.py",
      "classes": [
        {
          "name": "ErrorHandler",
          "methods": [
            {
              "name": "log_database_action",
              "args": [
                "action",
                "details"
              ]
            },
            {
              "name": "validate_positive_integer",
              "args": [
                "value",
                "field_name"
              ]
            },
            {
              "name": "show_error",
              "args": [
                "self",
                "title",
                "message",
                "error"
              ]
            },
            {
              "name": "show_warning",
              "args": [
                "self",
                "title",
                "message"
              ]
            },
            {
              "name": "handle_error",
              "args": [
                "self",
                "func"
              ]
            }
          ],
          "base_classes": []
        },
        {
          "name": "ApplicationError",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "message",
                "details"
              ]
            }
          ],
          "base_classes": [
            "Exception"
          ]
        },
        {
          "name": "DatabaseError",
          "methods": [],
          "base_classes": [
            "ApplicationError"
          ]
        },
        {
          "name": "ValidationError",
          "methods": [],
          "base_classes": [
            "ApplicationError"
          ]
        }
      ],
      "functions": [
        {
          "name": "check_database_connection",
          "args": [
            "func"
          ]
        },
        {
          "name": "get_error_context",
          "args": []
        }
      ]
    },
    "utils\\error_handling.py": {
      "path": "utils\\error_handling.py",
      "classes": [
        {
          "name": "DatabaseError",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "message",
                "details",
                "error_code"
              ]
            },
            {
              "name": "__str__",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": [
            "Exception"
          ]
        }
      ],
      "functions": [
        {
          "name": "handle_database_error",
          "args": [
            "operation",
            "error",
            "context"
          ]
        },
        {
          "name": "log_database_action",
          "args": [
            "action",
            "details",
            "level"
          ]
        }
      ]
    },
    "utils\\exporters.py": {
      "path": "utils\\exporters.py",
      "classes": [
        {
          "name": "OrderExporter",
          "methods": [
            {
              "name": "export_to_csv",
              "args": [
                "data",
                "filepath"
              ]
            },
            {
              "name": "export_to_excel",
              "args": [
                "data",
                "filepath"
              ]
            },
            {
              "name": "export_to_json",
              "args": [
                "data",
                "filepath"
              ]
            }
          ],
          "base_classes": []
        },
        {
          "name": "OrderImporter",
          "methods": [
            {
              "name": "import_from_csv",
              "args": [
                "order_file",
                "details_file"
              ]
            },
            {
              "name": "import_from_excel",
              "args": [
                "filepath"
              ]
            },
            {
              "name": "import_from_json",
              "args": [
                "filepath"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "utils\\logger.py": {
      "path": "utils\\logger.py",
      "classes": [
        {
          "name": "AppLogger",
          "methods": [
            {
              "name": "__new__",
              "args": [
                "cls"
              ]
            },
            {
              "name": "_initialize_logger",
              "args": [
                "self"
              ]
            },
            {
              "name": "get_logger",
              "args": [
                "self",
                "name"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": [
        {
          "name": "get_logger",
          "args": [
            "name"
          ]
        },
        {
          "name": "log_error",
          "args": [
            "error",
            "context"
          ]
        },
        {
          "name": "log_info",
          "args": [
            "message"
          ]
        },
        {
          "name": "log_debug",
          "args": [
            "message"
          ]
        }
      ]
    },
    "utils\\logging_config.py": {
      "path": "utils\\logging_config.py",
      "classes": [
        {
          "name": "LoggerConfig",
          "methods": [
            {
              "name": "create_logger",
              "args": [
                "name",
                "log_level",
                "log_dir"
              ]
            }
          ],
          "base_classes": []
        },
        {
          "name": "ErrorTracker",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "logger"
              ]
            },
            {
              "name": "log_error",
              "args": [
                "self",
                "error",
                "context",
                "additional_info"
              ]
            },
            {
              "name": "trace_method",
              "args": [
                "self",
                "method_name"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "utils\\notifications.py": {
      "path": "utils\\notifications.py",
      "classes": [
        {
          "name": "NotificationType",
          "methods": [],
          "base_classes": [
            "Enum"
          ]
        },
        {
          "name": "StatusNotification",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "parent"
              ]
            },
            {
              "name": "setup_styles",
              "args": [
                "self"
              ]
            },
            {
              "name": "start_processor",
              "args": [
                "self"
              ]
            },
            {
              "name": "_process_notifications",
              "args": [
                "self"
              ]
            },
            {
              "name": "_show_notification",
              "args": [
                "self",
                "notification"
              ]
            },
            {
              "name": "_clear_notification",
              "args": [
                "self",
                "callback"
              ]
            },
            {
              "name": "show_info",
              "args": [
                "self",
                "message",
                "duration"
              ]
            },
            {
              "name": "show_success",
              "args": [
                "self",
                "message",
                "duration"
              ]
            },
            {
              "name": "show_warning",
              "args": [
                "self",
                "message",
                "duration"
              ]
            },
            {
              "name": "show_error",
              "args": [
                "self",
                "message",
                "duration"
              ]
            },
            {
              "name": "show_progress",
              "args": [
                "self",
                "message",
                "callback"
              ]
            },
            {
              "name": "clear",
              "args": [
                "self"
              ]
            },
            {
              "name": "cleanup",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "utils\\utils.py": {
      "path": "utils\\utils.py",
      "classes": [],
      "functions": []
    },
    "utils\\validators.py": {
      "path": "utils\\validators.py",
      "classes": [
        {
          "name": "OrderValidator",
          "methods": [
            {
              "name": "validate_order",
              "args": [
                "data"
              ]
            },
            {
              "name": "validate_order_details",
              "args": [
                "data"
              ]
            }
          ],
          "base_classes": []
        },
        {
          "name": "DataSanitizer",
          "methods": [
            {
              "name": "sanitize_string",
              "args": [
                "value"
              ]
            },
            {
              "name": "sanitize_numeric",
              "args": [
                "value"
              ]
            },
            {
              "name": "sanitize_identifier",
              "args": [
                "value"
              ]
            },
            {
              "name": "sanitize_order_data",
              "args": [
                "data"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "utils\\__init__.py": {
      "path": "utils\\__init__.py",
      "classes": [],
      "functions": []
    },
    "views\\__init__.py": {
      "path": "views\\__init__.py",
      "classes": [],
      "functions": []
    },
    "utils\\order_exporter\\order_exporter.py": {
      "path": "utils\\order_exporter\\order_exporter.py",
      "classes": [
        {
          "name": "OrderExporter",
          "methods": [
            {
              "name": "export_to_excel",
              "args": [
                "data",
                "filepath"
              ]
            },
            {
              "name": "export_to_csv",
              "args": [
                "data",
                "filepath"
              ]
            },
            {
              "name": "export_to_json",
              "args": [
                "data",
                "filepath"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "utils\\order_exporter\\__init__.py": {
      "path": "utils\\order_exporter\\__init__.py",
      "classes": [],
      "functions": []
    },
    "utils\\validators\\order_validator.py": {
      "path": "utils\\validators\\order_validator.py",
      "classes": [
        {
          "name": "OrderValidator",
          "methods": [
            {
              "name": "validate_order",
              "args": [
                "data"
              ]
            },
            {
              "name": "validate_order_detail",
              "args": [
                "data"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "utils\\validators\\__init__.py": {
      "path": "utils\\validators\\__init__.py",
      "classes": [],
      "functions": []
    },
    "tests\\test_database\\test_base_manager.py": {
      "path": "tests\\test_database\\test_base_manager.py",
      "classes": [
        {
          "name": "TestModel",
          "methods": [],
          "base_classes": [
            "TestBase"
          ]
        },
        {
          "name": "TestSpecializedManager",
          "methods": [
            {
              "name": "get_by_name",
              "args": [
                "self",
                "name"
              ]
            }
          ],
          "base_classes": []
        },
        {
          "name": "TestBaseManager",
          "methods": [
            {
              "name": "test_create_single_record",
              "args": [
                "self",
                "test_manager"
              ]
            },
            {
              "name": "test_get_record",
              "args": [
                "self",
                "test_manager"
              ]
            },
            {
              "name": "test_update_record",
              "args": [
                "self",
                "test_manager"
              ]
            },
            {
              "name": "test_delete_record",
              "args": [
                "self",
                "test_manager"
              ]
            },
            {
              "name": "test_bulk_create",
              "args": [
                "self",
                "test_manager"
              ]
            },
            {
              "name": "test_bulk_update",
              "args": [
                "self",
                "test_manager"
              ]
            },
            {
              "name": "test_get_all",
              "args": [
                "self",
                "test_manager"
              ]
            },
            {
              "name": "test_search",
              "args": [
                "self",
                "test_manager"
              ]
            },
            {
              "name": "test_filter",
              "args": [
                "self",
                "test_manager"
              ]
            },
            {
              "name": "test_exists",
              "args": [
                "self",
                "test_manager"
              ]
            },
            {
              "name": "test_count",
              "args": [
                "self",
                "test_manager"
              ]
            },
            {
              "name": "test_specialized_manager",
              "args": [
                "self",
                "session_factory"
              ]
            }
          ],
          "base_classes": []
        },
        {
          "name": "TestErrorHandling",
          "methods": [
            {
              "name": "test_create_invalid_data",
              "args": [
                "self",
                "test_manager"
              ]
            },
            {
              "name": "test_update_non_existent_record",
              "args": [
                "self",
                "test_manager"
              ]
            },
            {
              "name": "test_delete_non_existent_record",
              "args": [
                "self",
                "test_manager"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": [
        {
          "name": "test_engine",
          "args": []
        },
        {
          "name": "session_factory",
          "args": [
            "test_engine"
          ]
        },
        {
          "name": "test_manager",
          "args": [
            "session_factory"
          ]
        }
      ]
    },
    "tests\\test_database\\test_manager_factory.py": {
      "path": "tests\\test_database\\test_manager_factory.py",
      "classes": [
        {
          "name": "FactoryTestModel",
          "methods": [],
          "base_classes": [
            "FactoryTestBase"
          ]
        },
        {
          "name": "CustomTestManager",
          "methods": [
            {
              "name": "custom_method",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": []
        },
        {
          "name": "TestManagerFactory",
          "methods": [
            {
              "name": "test_engine",
              "args": [
                "self"
              ]
            },
            {
              "name": "session_factory",
              "args": [
                "self",
                "test_engine"
              ]
            },
            {
              "name": "test_manager_cache",
              "args": [
                "self",
                "session_factory"
              ]
            },
            {
              "name": "test_specialized_manager_registration",
              "args": [
                "self",
                "session_factory"
              ]
            },
            {
              "name": "test_force_new_manager",
              "args": [
                "self",
                "session_factory"
              ]
            },
            {
              "name": "test_manager_with_mixins",
              "args": [
                "self",
                "session_factory"
              ]
            },
            {
              "name": "test_invalid_mixin",
              "args": [
                "self",
                "session_factory"
              ]
            }
          ],
          "base_classes": []
        },
        {
          "name": "TestManagerPerformance",
          "methods": [
            {
              "name": "large_dataset_manager",
              "args": [
                "self",
                "session_factory"
              ]
            },
            {
              "name": "test_large_dataset_retrieval",
              "args": [
                "self",
                "large_dataset_manager"
              ]
            },
            {
              "name": "test_large_dataset_filtering",
              "args": [
                "self",
                "large_dataset_manager"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "tests\\test_database\\__init__.py": {
      "path": "tests\\test_database\\__init__.py",
      "classes": [],
      "functions": []
    },
    "tests\\test_repositories\\test_storage_repository.py": {
      "path": "tests\\test_repositories\\test_storage_repository.py",
      "classes": [
        {
          "name": "TestStorageRepository",
          "methods": [
            {
              "name": "setUp",
              "args": [
                "self"
              ]
            },
            {
              "name": "tearDown",
              "args": [
                "self"
              ]
            },
            {
              "name": "test_get_all",
              "args": [
                "self"
              ]
            },
            {
              "name": "test_get_by_id",
              "args": [
                "self"
              ]
            },
            {
              "name": "test_get_by_location",
              "args": [
                "self"
              ]
            },
            {
              "name": "test_create",
              "args": [
                "self"
              ]
            },
            {
              "name": "test_update",
              "args": [
                "self"
              ]
            },
            {
              "name": "test_delete",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": [
            "unittest.TestCase"
          ]
        }
      ],
      "functions": []
    },
    "tests\\test_repositories\\test_storage_service.py": {
      "path": "tests\\test_repositories\\test_storage_service.py",
      "classes": [
        {
          "name": "TestStorageService",
          "methods": [
            {
              "name": "setUp",
              "args": [
                "self"
              ]
            },
            {
              "name": "tearDown",
              "args": [
                "self"
              ]
            },
            {
              "name": "test_assign_product_to_storage",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": [
            "unittest.TestCase"
          ]
        }
      ],
      "functions": []
    },
    "tests\\test_repositories\\__init__.py": {
      "path": "tests\\test_repositories\\__init__.py",
      "classes": [],
      "functions": []
    },
    "src\\models\\__init__.py": {
      "path": "src\\models\\__init__.py",
      "classes": [],
      "functions": []
    },
    "services\\implementations\\inventory_service.py": {
      "path": "services\\implementations\\inventory_service.py",
      "classes": [
        {
          "name": "InventoryService",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "container"
              ]
            },
            {
              "name": "update_part_stock",
              "args": [
                "self",
                "part_id",
                "quantity_change",
                "transaction_type",
                "notes"
              ]
            },
            {
              "name": "update_leather_area",
              "args": [
                "self",
                "leather_id",
                "area_change",
                "transaction_type",
                "notes",
                "wastage"
              ]
            },
            {
              "name": "get_low_stock_parts",
              "args": [
                "self",
                "include_out_of_stock"
              ]
            },
            {
              "name": "get_low_stock_leather",
              "args": [
                "self",
                "include_out_of_stock"
              ]
            },
            {
              "name": "_part_to_dict",
              "args": [
                "self",
                "part"
              ]
            },
            {
              "name": "_leather_to_dict",
              "args": [
                "self",
                "leather"
              ]
            }
          ],
          "base_classes": [
            "Service",
            "IInventoryService"
          ]
        }
      ],
      "functions": []
    },
    "services\\implementations\\order_service.py": {
      "path": "services\\implementations\\order_service.py",
      "classes": [
        {
          "name": "OrderService",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "container"
              ]
            },
            {
              "name": "get_all_orders",
              "args": [
                "self"
              ]
            },
            {
              "name": "get_order_by_id",
              "args": [
                "self",
                "order_id"
              ]
            },
            {
              "name": "create_order",
              "args": [
                "self",
                "order_data"
              ]
            },
            {
              "name": "update_order",
              "args": [
                "self",
                "order_data"
              ]
            },
            {
              "name": "delete_order",
              "args": [
                "self",
                "order_id"
              ]
            },
            {
              "name": "_to_dict",
              "args": [
                "self",
                "order"
              ]
            }
          ],
          "base_classes": [
            "Service",
            "IOrderService"
          ]
        }
      ],
      "functions": []
    },
    "services\\implementations\\recipe_service.py": {
      "path": "services\\implementations\\recipe_service.py",
      "classes": [
        {
          "name": "RecipeService",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "container"
              ]
            },
            {
              "name": "get_all_recipes",
              "args": [
                "self"
              ]
            },
            {
              "name": "get_recipe_by_id",
              "args": [
                "self",
                "recipe_id"
              ]
            },
            {
              "name": "create_recipe",
              "args": [
                "self",
                "recipe_data",
                "items"
              ]
            },
            {
              "name": "update_recipe",
              "args": [
                "self",
                "recipe_id",
                "recipe_data",
                "items"
              ]
            },
            {
              "name": "delete_recipe",
              "args": [
                "self",
                "recipe_id"
              ]
            },
            {
              "name": "check_materials_availability",
              "args": [
                "self",
                "recipe_id",
                "quantity"
              ]
            },
            {
              "name": "_to_dict",
              "args": [
                "self",
                "recipe"
              ]
            }
          ],
          "base_classes": [
            "Service",
            "IRecipeService"
          ]
        }
      ],
      "functions": []
    },
    "services\\implementations\\shopping_list_service.py": {
      "path": "services\\implementations\\shopping_list_service.py",
      "classes": [
        {
          "name": "ShoppingListService",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "container"
              ]
            },
            {
              "name": "create_shopping_list",
              "args": [
                "self",
                "list_data",
                "items"
              ]
            },
            {
              "name": "add_item_to_list",
              "args": [
                "self",
                "list_id",
                "item_data"
              ]
            },
            {
              "name": "mark_item_purchased",
              "args": [
                "self",
                "item_id",
                "purchase_data"
              ]
            },
            {
              "name": "get_pending_items_by_supplier",
              "args": [
                "self"
              ]
            },
            {
              "name": "_get_shopping_list_with_items",
              "args": [
                "self",
                "list_id"
              ]
            },
            {
              "name": "_shopping_list_to_dict",
              "args": [
                "self",
                "shopping_list"
              ]
            },
            {
              "name": "_shopping_list_item_to_dict",
              "args": [
                "self",
                "item"
              ]
            }
          ],
          "base_classes": [
            "Service",
            "IShoppingListService"
          ]
        }
      ],
      "functions": []
    },
    "services\\implementations\\storage_service.py": {
      "path": "services\\implementations\\storage_service.py",
      "classes": [
        {
          "name": "StorageService",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "container"
              ]
            },
            {
              "name": "get_all_storage_locations",
              "args": [
                "self"
              ]
            },
            {
              "name": "get_storage_by_id",
              "args": [
                "self",
                "storage_id"
              ]
            },
            {
              "name": "create_storage_location",
              "args": [
                "self",
                "storage_data"
              ]
            },
            {
              "name": "update_storage_location",
              "args": [
                "self",
                "storage_id",
                "storage_data"
              ]
            },
            {
              "name": "delete_storage_location",
              "args": [
                "self",
                "storage_id"
              ]
            },
            {
              "name": "search_storage_locations",
              "args": [
                "self",
                "search_term"
              ]
            },
            {
              "name": "get_storage_status",
              "args": [
                "self",
                "storage_id"
              ]
            },
            {
              "name": "_to_dict",
              "args": [
                "self",
                "storage"
              ]
            }
          ],
          "base_classes": [
            "Service",
            "IStorageService"
          ]
        }
      ],
      "functions": []
    },
    "services\\implementations\\supplier_service.py": {
      "path": "services\\implementations\\supplier_service.py",
      "classes": [
        {
          "name": "SupplierService",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "container"
              ]
            },
            {
              "name": "get_all_suppliers",
              "args": [
                "self"
              ]
            },
            {
              "name": "get_supplier_by_id",
              "args": [
                "self",
                "supplier_id"
              ]
            },
            {
              "name": "create_supplier",
              "args": [
                "self",
                "supplier_data"
              ]
            },
            {
              "name": "update_supplier",
              "args": [
                "self",
                "supplier_id",
                "supplier_data"
              ]
            },
            {
              "name": "delete_supplier",
              "args": [
                "self",
                "supplier_id"
              ]
            },
            {
              "name": "_to_dict",
              "args": [
                "self",
                "supplier"
              ]
            }
          ],
          "base_classes": [
            "Service",
            "ISupplierService"
          ]
        }
      ],
      "functions": []
    },
    "services\\implementations\\__init__.py": {
      "path": "services\\implementations\\__init__.py",
      "classes": [],
      "functions": []
    },
    "services\\interfaces\\base_service.py": {
      "path": "services\\interfaces\\base_service.py",
      "classes": [
        {
          "name": "IBaseService",
          "methods": [],
          "base_classes": [
            "ABC"
          ]
        }
      ],
      "functions": []
    },
    "services\\interfaces\\inventory_service.py": {
      "path": "services\\interfaces\\inventory_service.py",
      "classes": [
        {
          "name": "IInventoryService",
          "methods": [
            {
              "name": "update_part_stock",
              "args": [
                "self",
                "part_id",
                "quantity_change",
                "transaction_type",
                "notes"
              ]
            },
            {
              "name": "update_leather_area",
              "args": [
                "self",
                "leather_id",
                "area_change",
                "transaction_type",
                "notes",
                "wastage"
              ]
            },
            {
              "name": "get_low_stock_parts",
              "args": [
                "self",
                "include_out_of_stock"
              ]
            },
            {
              "name": "get_low_stock_leather",
              "args": [
                "self",
                "include_out_of_stock"
              ]
            }
          ],
          "base_classes": [
            "ABC"
          ]
        }
      ],
      "functions": []
    },
    "services\\interfaces\\order_service.py": {
      "path": "services\\interfaces\\order_service.py",
      "classes": [
        {
          "name": "IOrderService",
          "methods": [
            {
              "name": "get_all_orders",
              "args": [
                "self"
              ]
            },
            {
              "name": "get_order_by_id",
              "args": [
                "self",
                "order_id"
              ]
            },
            {
              "name": "create_order",
              "args": [
                "self",
                "order_data"
              ]
            },
            {
              "name": "update_order",
              "args": [
                "self",
                "order_data"
              ]
            },
            {
              "name": "delete_order",
              "args": [
                "self",
                "order_id"
              ]
            }
          ],
          "base_classes": [
            "IBaseService"
          ]
        }
      ],
      "functions": []
    },
    "services\\interfaces\\recipe_service.py": {
      "path": "services\\interfaces\\recipe_service.py",
      "classes": [
        {
          "name": "IRecipeService",
          "methods": [
            {
              "name": "get_all_recipes",
              "args": [
                "self"
              ]
            },
            {
              "name": "get_recipe_by_id",
              "args": [
                "self",
                "recipe_id"
              ]
            },
            {
              "name": "create_recipe",
              "args": [
                "self",
                "recipe_data",
                "items"
              ]
            },
            {
              "name": "update_recipe",
              "args": [
                "self",
                "recipe_id",
                "recipe_data",
                "items"
              ]
            },
            {
              "name": "delete_recipe",
              "args": [
                "self",
                "recipe_id"
              ]
            },
            {
              "name": "check_materials_availability",
              "args": [
                "self",
                "recipe_id",
                "quantity"
              ]
            }
          ],
          "base_classes": [
            "IBaseService"
          ]
        }
      ],
      "functions": []
    },
    "services\\interfaces\\shopping_list_service.py": {
      "path": "services\\interfaces\\shopping_list_service.py",
      "classes": [
        {
          "name": "IShoppingListService",
          "methods": [
            {
              "name": "get_all_shopping_lists",
              "args": [
                "self"
              ]
            },
            {
              "name": "get_shopping_list_by_id",
              "args": [
                "self",
                "list_id"
              ]
            },
            {
              "name": "create_shopping_list",
              "args": [
                "self",
                "list_data",
                "items"
              ]
            },
            {
              "name": "update_shopping_list",
              "args": [
                "self",
                "list_id",
                "list_data",
                "items"
              ]
            },
            {
              "name": "delete_shopping_list",
              "args": [
                "self",
                "list_id"
              ]
            },
            {
              "name": "add_item_to_list",
              "args": [
                "self",
                "list_id",
                "item_data"
              ]
            },
            {
              "name": "remove_item_from_list",
              "args": [
                "self",
                "list_id",
                "item_id"
              ]
            },
            {
              "name": "mark_item_purchased",
              "args": [
                "self",
                "item_id",
                "purchase_data"
              ]
            },
            {
              "name": "search_shopping_lists",
              "args": [
                "self",
                "search_term"
              ]
            }
          ],
          "base_classes": [
            "IBaseService"
          ]
        }
      ],
      "functions": []
    },
    "services\\interfaces\\storage_service.py": {
      "path": "services\\interfaces\\storage_service.py",
      "classes": [
        {
          "name": "IStorageService",
          "methods": [
            {
              "name": "get_all_storage_locations",
              "args": [
                "self"
              ]
            },
            {
              "name": "get_storage_by_id",
              "args": [
                "self",
                "storage_id"
              ]
            },
            {
              "name": "create_storage_location",
              "args": [
                "self",
                "storage_data"
              ]
            },
            {
              "name": "update_storage_location",
              "args": [
                "self",
                "storage_id",
                "storage_data"
              ]
            },
            {
              "name": "delete_storage_location",
              "args": [
                "self",
                "storage_id"
              ]
            },
            {
              "name": "search_storage_locations",
              "args": [
                "self",
                "search_term"
              ]
            },
            {
              "name": "get_storage_status",
              "args": [
                "self",
                "storage_id"
              ]
            }
          ],
          "base_classes": [
            "ABC"
          ]
        }
      ],
      "functions": []
    },
    "services\\interfaces\\supplier_service.py": {
      "path": "services\\interfaces\\supplier_service.py",
      "classes": [
        {
          "name": "ISupplierService",
          "methods": [
            {
              "name": "get_all_suppliers",
              "args": [
                "self"
              ]
            },
            {
              "name": "get_supplier_by_id",
              "args": [
                "self",
                "supplier_id"
              ]
            },
            {
              "name": "create_supplier",
              "args": [
                "self",
                "supplier_data"
              ]
            },
            {
              "name": "update_supplier",
              "args": [
                "self",
                "supplier_id",
                "supplier_data"
              ]
            },
            {
              "name": "delete_supplier",
              "args": [
                "self",
                "supplier_id"
              ]
            }
          ],
          "base_classes": [
            "IBaseService"
          ]
        }
      ],
      "functions": []
    },
    "services\\interfaces\\__init__.py": {
      "path": "services\\interfaces\\__init__.py",
      "classes": [],
      "functions": []
    },
    "gui\\dialogs\\add_dialog.py": {
      "path": "gui\\dialogs\\add_dialog.py",
      "classes": [
        {
          "name": "AddDialog",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "parent",
                "save_callback",
                "fields",
                "title"
              ]
            },
            {
              "name": "_create_ui",
              "args": [
                "self"
              ]
            },
            {
              "name": "_on_save",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": [
            "tk.Toplevel"
          ]
        }
      ],
      "functions": []
    },
    "gui\\dialogs\\base_dialog.py": {
      "path": "gui\\dialogs\\base_dialog.py",
      "classes": [
        {
          "name": "BaseDialog",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "parent",
                "title",
                "size",
                "modal"
              ]
            },
            {
              "name": "_create_main_frame",
              "args": [
                "self"
              ]
            },
            {
              "name": "_create_button_frame",
              "args": [
                "self"
              ]
            },
            {
              "name": "add_ok_cancel_buttons",
              "args": [
                "self",
                "ok_text",
                "cancel_text",
                "ok_command"
              ]
            },
            {
              "name": "add_button",
              "args": [
                "self",
                "text",
                "command",
                "side",
                "width",
                "default"
              ]
            },
            {
              "name": "center_on_parent",
              "args": [
                "self"
              ]
            },
            {
              "name": "ok",
              "args": [
                "self",
                "event"
              ]
            },
            {
              "name": "cancel",
              "args": [
                "self",
                "event"
              ]
            },
            {
              "name": "validate",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": [
            "tk.Toplevel"
          ]
        }
      ],
      "functions": []
    },
    "gui\\dialogs\\filter_dialog.py": {
      "path": "gui\\dialogs\\filter_dialog.py",
      "classes": [
        {
          "name": "FilterDialog",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "parent",
                "columns",
                "filter_callback"
              ]
            },
            {
              "name": "setup_ui",
              "args": [
                "self"
              ]
            },
            {
              "name": "add_filter",
              "args": [
                "self"
              ]
            },
            {
              "name": "remove_filter",
              "args": [
                "self",
                "filter_frame"
              ]
            },
            {
              "name": "get_filter_conditions",
              "args": [
                "self"
              ]
            },
            {
              "name": "apply_filters",
              "args": [
                "self"
              ]
            },
            {
              "name": "validate_numeric_filter",
              "args": [
                "self",
                "value",
                "column"
              ]
            },
            {
              "name": "clear_filters",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": [
            "tk.Toplevel"
          ]
        }
      ],
      "functions": []
    },
    "gui\\dialogs\\report_dialog.py": {
      "path": "gui\\dialogs\\report_dialog.py",
      "classes": [
        {
          "name": "ReportDialog",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "parent"
              ]
            },
            {
              "name": "create_ui",
              "args": [
                "self"
              ]
            },
            {
              "name": "create_report_display",
              "args": [
                "self",
                "parent"
              ]
            },
            {
              "name": "update_options",
              "args": [
                "self"
              ]
            },
            {
              "name": "on_report_type_change",
              "args": [
                "self"
              ]
            },
            {
              "name": "generate_report",
              "args": [
                "self"
              ]
            },
            {
              "name": "display_inventory_report",
              "args": [
                "self"
              ]
            },
            {
              "name": "display_orders_report",
              "args": [
                "self"
              ]
            },
            {
              "name": "display_suppliers_report",
              "args": [
                "self"
              ]
            },
            {
              "name": "create_treeview",
              "args": [
                "self",
                "parent",
                "columns",
                "data"
              ]
            }
          ],
          "base_classes": [
            "BaseDialog"
          ]
        }
      ],
      "functions": []
    },
    "gui\\dialogs\\search_dialog.py": {
      "path": "gui\\dialogs\\search_dialog.py",
      "classes": [
        {
          "name": "SearchDialog",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "parent",
                "columns",
                "search_callback"
              ]
            },
            {
              "name": "setup_ui",
              "args": [
                "self"
              ]
            },
            {
              "name": "search",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": [
            "tk.Toplevel"
          ]
        }
      ],
      "functions": []
    },
    "gui\\dialogs\\__init__.py": {
      "path": "gui\\dialogs\\__init__.py",
      "classes": [],
      "functions": []
    },
    "gui\\order\\incoming_goods_view.py": {
      "path": "gui\\order\\incoming_goods_view.py",
      "classes": [
        {
          "name": "IncomingGoodsView",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "parent",
                "session"
              ]
            },
            {
              "name": "_setup_ui",
              "args": [
                "self"
              ]
            },
            {
              "name": "_create_toolbar",
              "args": [
                "self"
              ]
            },
            {
              "name": "_create_content_area",
              "args": [
                "self"
              ]
            },
            {
              "name": "_create_treeview",
              "args": [
                "parent",
                "columns",
                "select_callback"
              ]
            },
            {
              "name": "_load_initial_data",
              "args": [
                "self"
              ]
            },
            {
              "name": "_populate_orders_tree",
              "args": [
                "self",
                "orders"
              ]
            },
            {
              "name": "_on_order_select",
              "args": [
                "self",
                "event"
              ]
            },
            {
              "name": "_load_order_details",
              "args": [
                "self",
                "order_id"
              ]
            },
            {
              "name": "cleanup",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": [
            "BaseView"
          ]
        }
      ],
      "functions": []
    },
    "gui\\order\\order_dialog.py": {
      "path": "gui\\order\\order_dialog.py",
      "classes": [
        {
          "name": "AddOrderDialog",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "parent",
                "save_callback",
                "fields",
                "suppliers",
                "existing_data",
                "title"
              ]
            },
            {
              "name": "_create_main_frame",
              "args": [
                "self"
              ]
            },
            {
              "name": "_create_order_details_fields",
              "args": [
                "self",
                "parent"
              ]
            },
            {
              "name": "_create_order_items_section",
              "args": [
                "self",
                "parent"
              ]
            },
            {
              "name": "_show_add_item_dialog",
              "args": [
                "self"
              ]
            },
            {
              "name": "_remove_selected_item",
              "args": [
                "self"
              ]
            },
            {
              "name": "ok",
              "args": [
                "self",
                "event"
              ]
            },
            {
              "name": "validate",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": [
            "BaseDialog"
          ]
        }
      ],
      "functions": []
    },
    "gui\\order\\order_view.py": {
      "path": "gui\\order\\order_view.py",
      "classes": [
        {
          "name": "OrderView",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "parent",
                "app"
              ]
            },
            {
              "name": "setup_ui",
              "args": [
                "self"
              ]
            },
            {
              "name": "create_toolbar",
              "args": [
                "self"
              ]
            },
            {
              "name": "create_order_list",
              "args": [
                "self"
              ]
            },
            {
              "name": "create_order_details",
              "args": [
                "self"
              ]
            },
            {
              "name": "load_data",
              "args": [
                "self"
              ]
            },
            {
              "name": "show_add_order_dialog",
              "args": [
                "self"
              ]
            },
            {
              "name": "_save_new_order",
              "args": [
                "self",
                "order_data"
              ]
            },
            {
              "name": "_on_order_select",
              "args": [
                "self",
                "event"
              ]
            },
            {
              "name": "_load_order_details",
              "args": [
                "self",
                "order_id"
              ]
            },
            {
              "name": "_edit_order",
              "args": [
                "self"
              ]
            },
            {
              "name": "_save_edited_order",
              "args": [
                "self",
                "order_data"
              ]
            },
            {
              "name": "delete_order",
              "args": [
                "self"
              ]
            },
            {
              "name": "_show_search_dialog",
              "args": [
                "self"
              ]
            },
            {
              "name": "save",
              "args": [
                "self"
              ]
            },
            {
              "name": "undo",
              "args": [
                "self"
              ]
            },
            {
              "name": "redo",
              "args": [
                "self"
              ]
            },
            {
              "name": "cleanup",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": [
            "BaseView"
          ]
        }
      ],
      "functions": []
    },
    "gui\\order\\shopping_list_view.py": {
      "path": "gui\\order\\shopping_list_view.py",
      "classes": [
        {
          "name": "ShoppingListView",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "parent"
              ]
            },
            {
              "name": "setup_table_selection",
              "args": [
                "self"
              ]
            },
            {
              "name": "load_shopping_lists",
              "args": [
                "self"
              ]
            },
            {
              "name": "show_add_list_dialog",
              "args": [
                "self"
              ]
            },
            {
              "name": "on_list_select",
              "args": [
                "self",
                "event"
              ]
            },
            {
              "name": "load_list_items",
              "args": [
                "self",
                "list_id"
              ]
            },
            {
              "name": "show_add_item_dialog",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": [
            "ttk.Frame"
          ]
        }
      ],
      "functions": []
    },
    "gui\\order\\supplier_view.py": {
      "path": "gui\\order\\supplier_view.py",
      "classes": [
        {
          "name": "SupplierView",
          "methods": [
            {
              "name": "handle_return",
              "args": [
                "self",
                "event"
              ]
            },
            {
              "name": "handle_escape",
              "args": [
                "self",
                "event"
              ]
            },
            {
              "name": "show_search_dialog",
              "args": [
                "self"
              ]
            },
            {
              "name": "show_filter_dialog",
              "args": [
                "self"
              ]
            },
            {
              "name": "save_table",
              "args": [
                "self"
              ]
            },
            {
              "name": "__init__",
              "args": [
                "self",
                "parent"
              ]
            },
            {
              "name": "setup_toolbar",
              "args": [
                "self"
              ]
            },
            {
              "name": "setup_table",
              "args": [
                "self"
              ]
            },
            {
              "name": "load_data",
              "args": [
                "self"
              ]
            },
            {
              "name": "load_table",
              "args": [
                "self"
              ]
            },
            {
              "name": "reset_view",
              "args": [
                "self"
              ]
            },
            {
              "name": "show_add_dialog",
              "args": [
                "self"
              ]
            },
            {
              "name": "delete_selected",
              "args": [
                "self",
                "event"
              ]
            },
            {
              "name": "on_double_click",
              "args": [
                "self",
                "event"
              ]
            },
            {
              "name": "start_cell_edit",
              "args": [
                "self",
                "item",
                "column"
              ]
            },
            {
              "name": "undo",
              "args": [
                "self"
              ]
            },
            {
              "name": "redo",
              "args": [
                "self"
              ]
            },
            {
              "name": "sort_column",
              "args": [
                "self",
                "column"
              ]
            }
          ],
          "base_classes": [
            "ttk.Frame"
          ]
        }
      ],
      "functions": []
    },
    "gui\\order\\__init__.py": {
      "path": "gui\\order\\__init__.py",
      "classes": [],
      "functions": []
    },
    "gui\\product\\recipe_view.py": {
      "path": "gui\\product\\recipe_view.py",
      "classes": [
        {
          "name": "RecipeView",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "parent"
              ]
            },
            {
              "name": "create_ui",
              "args": [
                "self"
              ]
            },
            {
              "name": "create_toolbar",
              "args": [
                "self"
              ]
            },
            {
              "name": "create_main_content",
              "args": [
                "self"
              ]
            },
            {
              "name": "create_treeview",
              "args": [
                "self",
                "parent",
                "columns",
                "select_callback"
              ]
            },
            {
              "name": "create_status_bar",
              "args": [
                "self"
              ]
            },
            {
              "name": "load_data",
              "args": [
                "self"
              ]
            },
            {
              "name": "on_index_select",
              "args": [
                "self",
                "event"
              ]
            },
            {
              "name": "load_recipe_details",
              "args": [
                "self",
                "recipe_id"
              ]
            },
            {
              "name": "show_add_recipe_dialog",
              "args": [
                "self"
              ]
            },
            {
              "name": "show_add_item_dialog",
              "args": [
                "self"
              ]
            },
            {
              "name": "show_search_dialog",
              "args": [
                "self"
              ]
            },
            {
              "name": "show_filter_dialog",
              "args": [
                "self"
              ]
            },
            {
              "name": "delete_selected",
              "args": [
                "self",
                "tree"
              ]
            },
            {
              "name": "undo",
              "args": [
                "self",
                "event"
              ]
            },
            {
              "name": "redo",
              "args": [
                "self",
                "event"
              ]
            },
            {
              "name": "sort_column",
              "args": [
                "self",
                "tree",
                "col"
              ]
            }
          ],
          "base_classes": [
            "ttk.Frame"
          ]
        }
      ],
      "functions": []
    },
    "gui\\product\\storage_view.py": {
      "path": "gui\\product\\storage_view.py",
      "classes": [
        {
          "name": "StorageView",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "parent"
              ]
            },
            {
              "name": "setup_toolbar",
              "args": [
                "self"
              ]
            },
            {
              "name": "setup_table",
              "args": [
                "self"
              ]
            },
            {
              "name": "load_data",
              "args": [
                "self"
              ]
            },
            {
              "name": "show_add_dialog",
              "args": [
                "self"
              ]
            },
            {
              "name": "show_search_dialog",
              "args": [
                "self"
              ]
            },
            {
              "name": "show_filter_dialog",
              "args": [
                "self"
              ]
            },
            {
              "name": "delete_selected",
              "args": [
                "self",
                "event"
              ]
            },
            {
              "name": "on_double_click",
              "args": [
                "self",
                "event"
              ]
            },
            {
              "name": "start_cell_edit",
              "args": [
                "self",
                "item",
                "column"
              ]
            },
            {
              "name": "undo",
              "args": [
                "self",
                "event"
              ]
            },
            {
              "name": "redo",
              "args": [
                "self",
                "event"
              ]
            },
            {
              "name": "reset_view",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": [
            "ttk.Frame"
          ]
        }
      ],
      "functions": []
    },
    "gui\\product\\__init__.py": {
      "path": "gui\\product\\__init__.py",
      "classes": [],
      "functions": []
    },
    "gui\\recipe\\recipe_view.py": {
      "path": "gui\\recipe\\recipe_view.py",
      "classes": [
        {
          "name": "RecipeView",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "parent",
                "app"
              ]
            },
            {
              "name": "setup_ui",
              "args": [
                "self"
              ]
            },
            {
              "name": "create_toolbar",
              "args": [
                "self"
              ]
            },
            {
              "name": "create_recipes_treeview",
              "args": [
                "self"
              ]
            },
            {
              "name": "create_details_view",
              "args": [
                "self"
              ]
            },
            {
              "name": "create_info_view",
              "args": [
                "self"
              ]
            },
            {
              "name": "create_items_view",
              "args": [
                "self"
              ]
            },
            {
              "name": "on_recipe_select",
              "args": [
                "self",
                "event"
              ]
            },
            {
              "name": "load_recipe_details",
              "args": [
                "self",
                "recipe_id"
              ]
            },
            {
              "name": "show_add_recipe_dialog",
              "args": [
                "self"
              ]
            },
            {
              "name": "edit_recipe",
              "args": [
                "self"
              ]
            },
            {
              "name": "delete_recipe",
              "args": [
                "self"
              ]
            },
            {
              "name": "load_data",
              "args": [
                "self"
              ]
            },
            {
              "name": "cleanup",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": [
            "BaseView"
          ]
        }
      ],
      "functions": []
    },
    "gui\\recipe\\__init__.py": {
      "path": "gui\\recipe\\__init__.py",
      "classes": [],
      "functions": []
    },
    "gui\\reports\\report_manager.py": {
      "path": "gui\\reports\\report_manager.py",
      "classes": [],
      "functions": []
    },
    "gui\\reports\\__init__.py": {
      "path": "gui\\reports\\__init__.py",
      "classes": [],
      "functions": []
    },
    "gui\\shopping_list\\shopping_list_view.py": {
      "path": "gui\\shopping_list\\shopping_list_view.py",
      "classes": [
        {
          "name": "ShoppingListView",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "parent",
                "app"
              ]
            },
            {
              "name": "setup_ui",
              "args": [
                "self"
              ]
            },
            {
              "name": "create_toolbar",
              "args": [
                "self"
              ]
            },
            {
              "name": "create_lists_treeview",
              "args": [
                "self"
              ]
            },
            {
              "name": "create_details_view",
              "args": [
                "self"
              ]
            },
            {
              "name": "create_info_view",
              "args": [
                "self"
              ]
            },
            {
              "name": "create_items_view",
              "args": [
                "self"
              ]
            },
            {
              "name": "load_data",
              "args": [
                "self"
              ]
            },
            {
              "name": "on_list_select",
              "args": [
                "self",
                "event"
              ]
            },
            {
              "name": "load_list_details",
              "args": [
                "self",
                "list_id"
              ]
            },
            {
              "name": "show_add_list_dialog",
              "args": [
                "self"
              ]
            },
            {
              "name": "show_add_item_dialog",
              "args": [
                "self"
              ]
            },
            {
              "name": "show_mark_purchased_dialog",
              "args": [
                "self"
              ]
            },
            {
              "name": "remove_item",
              "args": [
                "self"
              ]
            },
            {
              "name": "delete_list",
              "args": [
                "self"
              ]
            },
            {
              "name": "show_search_dialog",
              "args": [
                "self"
              ]
            },
            {
              "name": "save",
              "args": [
                "self"
              ]
            },
            {
              "name": "undo",
              "args": [
                "self"
              ]
            },
            {
              "name": "redo",
              "args": [
                "self"
              ]
            },
            {
              "name": "cleanup",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": [
            "BaseView"
          ]
        }
      ],
      "functions": []
    },
    "gui\\shopping_list\\__init__.py": {
      "path": "gui\\shopping_list\\__init__.py",
      "classes": [],
      "functions": []
    },
    "gui\\storage\\sorting_system_view.py": {
      "path": "gui\\storage\\sorting_system_view.py",
      "classes": [
        {
          "name": "SortingSystemView",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "parent",
                "session_factory"
              ]
            },
            {
              "name": "setup_toolbar",
              "args": [
                "self"
              ]
            },
            {
              "name": "setup_table",
              "args": [
                "self"
              ]
            },
            {
              "name": "load_data",
              "args": [
                "self"
              ]
            },
            {
              "name": "get_warning_tag",
              "args": [
                "self",
                "amount",
                "warning_threshold"
              ]
            },
            {
              "name": "show_add_dialog",
              "args": [
                "self"
              ]
            },
            {
              "name": "save_new_item",
              "args": [
                "self",
                "data"
              ]
            },
            {
              "name": "generate_unique_id",
              "args": [
                "self",
                "name"
              ]
            },
            {
              "name": "on_double_click",
              "args": [
                "self",
                "event"
              ]
            },
            {
              "name": "start_cell_edit",
              "args": [
                "self",
                "item",
                "column"
              ]
            },
            {
              "name": "delete_selected",
              "args": [
                "self",
                "event"
              ]
            },
            {
              "name": "undo",
              "args": [
                "self"
              ]
            },
            {
              "name": "redo",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": [
            "ttk.Frame"
          ]
        }
      ],
      "functions": []
    },
    "gui\\storage\\storage_view.py": {
      "path": "gui\\storage\\storage_view.py",
      "classes": [
        {
          "name": "StorageView",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "parent",
                "app"
              ]
            },
            {
              "name": "setup_ui",
              "args": [
                "self"
              ]
            },
            {
              "name": "create_toolbar",
              "args": [
                "self"
              ]
            },
            {
              "name": "create_treeview",
              "args": [
                "self"
              ]
            },
            {
              "name": "load_data",
              "args": [
                "self"
              ]
            },
            {
              "name": "show_add_dialog",
              "args": [
                "self"
              ]
            },
            {
              "name": "on_double_click",
              "args": [
                "self",
                "event"
              ]
            },
            {
              "name": "start_cell_edit",
              "args": [
                "self",
                "item",
                "column"
              ]
            },
            {
              "name": "delete_selected",
              "args": [
                "self",
                "event"
              ]
            },
            {
              "name": "show_search_dialog",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": [
            "BaseView"
          ]
        }
      ],
      "functions": []
    },
    "gui\\storage\\__init__.py": {
      "path": "gui\\storage\\__init__.py",
      "classes": [],
      "functions": []
    },
    "database\\interfaces\\base_repository.py": {
      "path": "database\\interfaces\\base_repository.py",
      "classes": [
        {
          "name": "BaseRepository",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "session",
                "model_class"
              ]
            },
            {
              "name": "get",
              "args": [
                "self",
                "id"
              ]
            },
            {
              "name": "get_all",
              "args": [
                "self"
              ]
            },
            {
              "name": "create",
              "args": [
                "self"
              ]
            },
            {
              "name": "update",
              "args": [
                "self",
                "id"
              ]
            },
            {
              "name": "delete",
              "args": [
                "self",
                "id"
              ]
            },
            {
              "name": "filter_by",
              "args": [
                "self"
              ]
            },
            {
              "name": "exists",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "database\\interfaces\\__init__.py": {
      "path": "database\\interfaces\\__init__.py",
      "classes": [],
      "functions": []
    },
    "database\\models\\base.py": {
      "path": "database\\models\\base.py",
      "classes": [
        {
          "name": "BaseModel",
          "methods": [
            {
              "name": "__repr__",
              "args": [
                "self"
              ]
            },
            {
              "name": "to_dict",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": [
            "Base"
          ]
        }
      ],
      "functions": []
    },
    "database\\models\\enums.py": {
      "path": "database\\models\\enums.py",
      "classes": [
        {
          "name": "InventoryStatus",
          "methods": [],
          "base_classes": [
            "Enum"
          ]
        },
        {
          "name": "ProductionStatus",
          "methods": [],
          "base_classes": [
            "Enum"
          ]
        },
        {
          "name": "TransactionType",
          "methods": [],
          "base_classes": [
            "Enum"
          ]
        },
        {
          "name": "OrderStatus",
          "methods": [],
          "base_classes": [
            "Enum"
          ]
        },
        {
          "name": "PaymentStatus",
          "methods": [],
          "base_classes": [
            "Enum"
          ]
        }
      ],
      "functions": []
    },
    "database\\models\\leather.py": {
      "path": "database\\models\\leather.py",
      "classes": [
        {
          "name": "Leather",
          "methods": [
            {
              "name": "__repr__",
              "args": [
                "self"
              ]
            },
            {
              "name": "usage_percentage",
              "args": [
                "self"
              ]
            },
            {
              "name": "can_fulfill_requirement",
              "args": [
                "self",
                "required_area"
              ]
            }
          ],
          "base_classes": [
            "BaseModel"
          ]
        }
      ],
      "functions": []
    },
    "database\\models\\order.py": {
      "path": "database\\models\\order.py",
      "classes": [
        {
          "name": "OrderStatus",
          "methods": [],
          "base_classes": [
            "PyEnum"
          ]
        },
        {
          "name": "PaymentStatus",
          "methods": [],
          "base_classes": [
            "PyEnum"
          ]
        },
        {
          "name": "Order",
          "methods": [
            {
              "name": "__repr__",
              "args": [
                "self"
              ]
            },
            {
              "name": "calculate_total_amount",
              "args": [
                "self"
              ]
            },
            {
              "name": "update_total_amount",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": [
            "BaseModel"
          ]
        },
        {
          "name": "OrderItem",
          "methods": [
            {
              "name": "__repr__",
              "args": [
                "self"
              ]
            },
            {
              "name": "update_total_price",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": [
            "BaseModel"
          ]
        }
      ],
      "functions": []
    },
    "database\\models\\part.py": {
      "path": "database\\models\\part.py",
      "classes": [
        {
          "name": "Part",
          "methods": [
            {
              "name": "__repr__",
              "args": [
                "self"
              ]
            },
            {
              "name": "total_value",
              "args": [
                "self"
              ]
            },
            {
              "name": "needs_reorder",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": [
            "BaseModel"
          ]
        }
      ],
      "functions": []
    },
    "database\\models\\product.py": {
      "path": "database\\models\\product.py",
      "classes": [
        {
          "name": "Product",
          "methods": [
            {
              "name": "__repr__",
              "args": [
                "self"
              ]
            },
            {
              "name": "total_value",
              "args": [
                "self"
              ]
            },
            {
              "name": "get_primary_recipe",
              "args": [
                "self"
              ]
            },
            {
              "name": "calculate_production_cost",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": [
            "BaseModel"
          ]
        }
      ],
      "functions": []
    },
    "database\\models\\recipe.py": {
      "path": "database\\models\\recipe.py",
      "classes": [
        {
          "name": "Recipe",
          "methods": [
            {
              "name": "__repr__",
              "args": [
                "self"
              ]
            },
            {
              "name": "calculate_total_cost",
              "args": [
                "self"
              ]
            },
            {
              "name": "check_ingredient_availability",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": [
            "BaseModel"
          ]
        },
        {
          "name": "RecipeItem",
          "methods": [
            {
              "name": "__repr__",
              "args": [
                "self"
              ]
            },
            {
              "name": "calculate_item_cost",
              "args": [
                "self"
              ]
            },
            {
              "name": "is_available",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": [
            "BaseModel"
          ]
        }
      ],
      "functions": []
    },
    "database\\models\\shopping_list.py": {
      "path": "database\\models\\shopping_list.py",
      "classes": [
        {
          "name": "ShoppingList",
          "methods": [],
          "base_classes": [
            "BaseModel"
          ]
        },
        {
          "name": "ShoppingListItem",
          "methods": [],
          "base_classes": [
            "BaseModel"
          ]
        }
      ],
      "functions": []
    },
    "database\\models\\storage.py": {
      "path": "database\\models\\storage.py",
      "classes": [
        {
          "name": "Storage",
          "methods": [
            {
              "name": "occupancy_percentage",
              "args": [
                "self"
              ]
            },
            {
              "name": "__repr__",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": [
            "Base"
          ]
        }
      ],
      "functions": []
    },
    "database\\models\\supplier.py": {
      "path": "database\\models\\supplier.py",
      "classes": [
        {
          "name": "Supplier",
          "methods": [
            {
              "name": "__repr__",
              "args": [
                "self"
              ]
            },
            {
              "name": "total_parts",
              "args": [
                "self"
              ]
            },
            {
              "name": "total_products",
              "args": [
                "self"
              ]
            },
            {
              "name": "total_leather_materials",
              "args": [
                "self"
              ]
            },
            {
              "name": "total_orders",
              "args": [
                "self"
              ]
            },
            {
              "name": "get_performance_metrics",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": [
            "BaseModel"
          ]
        }
      ],
      "functions": []
    },
    "database\\models\\transaction.py": {
      "path": "database\\models\\transaction.py",
      "classes": [
        {
          "name": "TransactionType",
          "methods": [],
          "base_classes": [
            "Enum"
          ]
        },
        {
          "name": "InventoryTransaction",
          "methods": [
            {
              "name": "__repr__",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": [
            "BaseModel"
          ]
        },
        {
          "name": "LeatherTransaction",
          "methods": [
            {
              "name": "__repr__",
              "args": [
                "self"
              ]
            },
            {
              "name": "net_area_change",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": [
            "BaseModel"
          ]
        }
      ],
      "functions": []
    },
    "database\\models\\__init__.py": {
      "path": "database\\models\\__init__.py",
      "classes": [],
      "functions": []
    },
    "database\\repositories\\leather_repository.py": {
      "path": "database\\repositories\\leather_repository.py",
      "classes": [
        {
          "name": "LeatherRepository",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "session"
              ]
            },
            {
              "name": "get_low_stock",
              "args": [
                "self"
              ]
            },
            {
              "name": "get_by_supplier",
              "args": [
                "self",
                "supplier_id"
              ]
            },
            {
              "name": "get_with_transactions",
              "args": [
                "self",
                "leather_id"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "database\\repositories\\order_repository.py": {
      "path": "database\\repositories\\order_repository.py",
      "classes": [
        {
          "name": "OrderRepository",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "session"
              ]
            },
            {
              "name": "get_with_items",
              "args": [
                "self",
                "order_id"
              ]
            },
            {
              "name": "get_by_status",
              "args": [
                "self",
                "status"
              ]
            },
            {
              "name": "get_by_date_range",
              "args": [
                "self",
                "start_date",
                "end_date"
              ]
            },
            {
              "name": "get_by_supplier",
              "args": [
                "self",
                "supplier_id"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "database\\repositories\\part_repository.py": {
      "path": "database\\repositories\\part_repository.py",
      "classes": [
        {
          "name": "PartRepository",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "session"
              ]
            },
            {
              "name": "get_low_stock",
              "args": [
                "self"
              ]
            },
            {
              "name": "get_by_supplier",
              "args": [
                "self",
                "supplier_id"
              ]
            },
            {
              "name": "get_with_transactions",
              "args": [
                "self",
                "part_id"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "database\\repositories\\product_repository.py": {
      "path": "database\\repositories\\product_repository.py",
      "classes": [
        {
          "name": "ProductRepository",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "session"
              ]
            },
            {
              "name": "get_by_storage",
              "args": [
                "self",
                "storage_id"
              ]
            },
            {
              "name": "search_by_name",
              "args": [
                "self",
                "name"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "database\\repositories\\recipe_repository.py": {
      "path": "database\\repositories\\recipe_repository.py",
      "classes": [
        {
          "name": "RecipeRepository",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "session"
              ]
            },
            {
              "name": "get_with_items",
              "args": [
                "self",
                "recipe_id"
              ]
            },
            {
              "name": "get_by_product",
              "args": [
                "self",
                "product_id"
              ]
            },
            {
              "name": "get_recipe_item",
              "args": [
                "self",
                "item_id"
              ]
            },
            {
              "name": "add_recipe_item",
              "args": [
                "self",
                "recipe_id",
                "item_data"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "database\\repositories\\shopping_list_repository.py": {
      "path": "database\\repositories\\shopping_list_repository.py",
      "classes": [
        {
          "name": "ShoppingListRepository",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "session"
              ]
            },
            {
              "name": "get_with_items",
              "args": [
                "self",
                "list_id"
              ]
            },
            {
              "name": "get_pending_items",
              "args": [
                "self"
              ]
            },
            {
              "name": "get_items_by_supplier",
              "args": [
                "self",
                "supplier_id"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "database\\repositories\\storage_repository.py": {
      "path": "database\\repositories\\storage_repository.py",
      "classes": [
        {
          "name": "StorageRepository",
          "methods": [
            {
              "name": "get_by_location",
              "args": [
                "self",
                "location"
              ]
            },
            {
              "name": "get_available_storage",
              "args": [
                "self"
              ]
            },
            {
              "name": "get_storage_with_details",
              "args": [
                "self",
                "storage_id"
              ]
            },
            {
              "name": "search_storage",
              "args": [
                "self",
                "search_term"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": [
        {
          "name": "get_storage_repository",
          "args": [
            "session"
          ]
        }
      ]
    },
    "database\\repositories\\supplier_repository.py": {
      "path": "database\\repositories\\supplier_repository.py",
      "classes": [
        {
          "name": "SupplierRepository",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "session"
              ]
            },
            {
              "name": "get_with_products",
              "args": [
                "self",
                "supplier_id"
              ]
            },
            {
              "name": "search",
              "args": [
                "self",
                "term"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "database\\repositories\\__init__.py": {
      "path": "database\\repositories\\__init__.py",
      "classes": [],
      "functions": []
    },
    "database\\scripts\\run_migration.py": {
      "path": "database\\scripts\\run_migration.py",
      "classes": [],
      "functions": [
        {
          "name": "initialize_database",
          "args": []
        }
      ]
    },
    "database\\scripts\\__init__.py": {
      "path": "database\\scripts\\__init__.py",
      "classes": [],
      "functions": []
    },
    "database\\sqlalchemy\\base.py": {
      "path": "database\\sqlalchemy\\base.py",
      "classes": [
        {
          "name": "CustomBase",
          "methods": [
            {
              "name": "__tablename__",
              "args": [
                "cls"
              ]
            },
            {
              "name": "__repr__",
              "args": [
                "self"
              ]
            },
            {
              "name": "to_dict",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "database\\sqlalchemy\\base_manager.py": {
      "path": "database\\sqlalchemy\\base_manager.py",
      "classes": [
        {
          "name": "BaseManager",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "model_class",
                "session_factory"
              ]
            },
            {
              "name": "session_scope",
              "args": [
                "self"
              ]
            },
            {
              "name": "create",
              "args": [
                "self",
                "data"
              ]
            },
            {
              "name": "get",
              "args": [
                "self",
                "id"
              ]
            },
            {
              "name": "get_all",
              "args": [
                "self",
                "order_by",
                "limit"
              ]
            },
            {
              "name": "update",
              "args": [
                "self",
                "id",
                "data"
              ]
            },
            {
              "name": "delete",
              "args": [
                "self",
                "id"
              ]
            },
            {
              "name": "exists",
              "args": [
                "self",
                "id"
              ]
            },
            {
              "name": "count",
              "args": [
                "self"
              ]
            },
            {
              "name": "filter_by",
              "args": [
                "self"
              ]
            },
            {
              "name": "search",
              "args": [
                "self",
                "term",
                "fields"
              ]
            },
            {
              "name": "bulk_create",
              "args": [
                "self",
                "items"
              ]
            },
            {
              "name": "bulk_update",
              "args": [
                "self",
                "items"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "database\\sqlalchemy\\config.py": {
      "path": "database\\sqlalchemy\\config.py",
      "classes": [
        {
          "name": "DatabaseConfig",
          "methods": [
            {
              "name": "__new__",
              "args": [
                "cls"
              ]
            },
            {
              "name": "__init__",
              "args": [
                "self"
              ]
            },
            {
              "name": "_initialize",
              "args": [
                "self"
              ]
            },
            {
              "name": "_find_project_root",
              "args": [
                "self"
              ]
            },
            {
              "name": "_load_config",
              "args": [
                "self"
              ]
            },
            {
              "name": "_get_database_url",
              "args": [
                "self"
              ]
            },
            {
              "name": "_create_engine",
              "args": [
                "self",
                "db_url"
              ]
            },
            {
              "name": "get_engine",
              "args": [
                "self"
              ]
            },
            {
              "name": "get_session",
              "args": [
                "self"
              ]
            },
            {
              "name": "close_session",
              "args": [
                "self",
                "session"
              ]
            },
            {
              "name": "test_connection",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": [
        {
          "name": "get_database_url",
          "args": []
        },
        {
          "name": "get_database_path",
          "args": []
        }
      ]
    },
    "database\\sqlalchemy\\manager.py": {
      "path": "database\\sqlalchemy\\manager.py",
      "classes": [
        {
          "name": "DatabaseError",
          "methods": [],
          "base_classes": [
            "Exception"
          ]
        },
        {
          "name": "BaseManager",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "session_factory"
              ]
            },
            {
              "name": "session_scope",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": []
        },
        {
          "name": "DatabaseManagerSQLAlchemy",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "database_url"
              ]
            },
            {
              "name": "session",
              "args": [
                "self"
              ]
            },
            {
              "name": "session_scope",
              "args": [
                "self"
              ]
            },
            {
              "name": "get_model_columns",
              "args": [
                "self",
                "model"
              ]
            },
            {
              "name": "add_record",
              "args": [
                "self",
                "model",
                "data"
              ]
            },
            {
              "name": "update_record",
              "args": [
                "self",
                "model",
                "record_id",
                "data"
              ]
            },
            {
              "name": "delete_record",
              "args": [
                "self",
                "model",
                "record_id"
              ]
            },
            {
              "name": "get_record",
              "args": [
                "self",
                "model",
                "record_id"
              ]
            },
            {
              "name": "get_all_records",
              "args": [
                "self",
                "model"
              ]
            },
            {
              "name": "search_records",
              "args": [
                "self",
                "model",
                "search_term"
              ]
            },
            {
              "name": "bulk_update",
              "args": [
                "self",
                "model",
                "updates"
              ]
            },
            {
              "name": "execute_query",
              "args": [
                "self",
                "query",
                "params"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "database\\sqlalchemy\\manager_factory.py": {
      "path": "database\\sqlalchemy\\manager_factory.py",
      "classes": [],
      "functions": [
        {
          "name": "register_specialized_manager",
          "args": [
            "model_class",
            "manager_class"
          ]
        },
        {
          "name": "get_manager",
          "args": [
            "model_class",
            "session_factory",
            "mixins",
            "force_new"
          ]
        },
        {
          "name": "_create_manager",
          "args": [
            "model_class",
            "session_factory",
            "mixins"
          ]
        },
        {
          "name": "clear_manager_cache",
          "args": []
        }
      ]
    },
    "database\\sqlalchemy\\migration.py": {
      "path": "database\\sqlalchemy\\migration.py",
      "classes": [
        {
          "name": "DatabaseInitializer",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "db_url",
                "backup_dir"
              ]
            },
            {
              "name": "create_backup",
              "args": [
                "self"
              ]
            },
            {
              "name": "drop_all_tables",
              "args": [
                "self"
              ]
            },
            {
              "name": "initialize_database",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": [
        {
          "name": "run_database_initialization",
          "args": [
            "db_url",
            "backup_dir",
            "force"
          ]
        }
      ]
    },
    "database\\sqlalchemy\\models.py": {
      "path": "database\\sqlalchemy\\models.py",
      "classes": [],
      "functions": []
    },
    "database\\sqlalchemy\\model_utils.py": {
      "path": "database\\sqlalchemy\\model_utils.py",
      "classes": [],
      "functions": [
        {
          "name": "get_model_classes",
          "args": []
        }
      ]
    },
    "database\\sqlalchemy\\session.py": {
      "path": "database\\sqlalchemy\\session.py",
      "classes": [],
      "functions": [
        {
          "name": "init_database",
          "args": [
            "db_url"
          ]
        },
        {
          "name": "get_db_session",
          "args": []
        },
        {
          "name": "close_all_sessions",
          "args": []
        }
      ]
    },
    "database\\sqlalchemy\\__init__.py": {
      "path": "database\\sqlalchemy\\__init__.py",
      "classes": [],
      "functions": []
    },
    "database\\sqlalchemy\\core\\base_manager.py": {
      "path": "database\\sqlalchemy\\core\\base_manager.py",
      "classes": [
        {
          "name": "BaseManager",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "model_class",
                "session_factory"
              ]
            },
            {
              "name": "session_scope",
              "args": [
                "self"
              ]
            },
            {
              "name": "create",
              "args": [
                "self",
                "data"
              ]
            },
            {
              "name": "get",
              "args": [
                "self",
                "id"
              ]
            },
            {
              "name": "get_all",
              "args": [
                "self",
                "order_by",
                "limit"
              ]
            },
            {
              "name": "update",
              "args": [
                "self",
                "id",
                "data"
              ]
            },
            {
              "name": "delete",
              "args": [
                "self",
                "id"
              ]
            },
            {
              "name": "exists",
              "args": [
                "self"
              ]
            },
            {
              "name": "count",
              "args": [
                "self"
              ]
            },
            {
              "name": "filter_by",
              "args": [
                "self"
              ]
            },
            {
              "name": "search",
              "args": [
                "self",
                "term",
                "fields"
              ]
            },
            {
              "name": "bulk_create",
              "args": [
                "self",
                "items"
              ]
            },
            {
              "name": "bulk_update",
              "args": [
                "self",
                "items"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "database\\sqlalchemy\\core\\manager_factory.py": {
      "path": "database\\sqlalchemy\\core\\manager_factory.py",
      "classes": [],
      "functions": [
        {
          "name": "register_specialized_manager",
          "args": [
            "model_class",
            "manager_class"
          ]
        },
        {
          "name": "get_manager",
          "args": [
            "model_class",
            "session_factory",
            "force_new"
          ]
        },
        {
          "name": "_create_manager",
          "args": [
            "model_class",
            "session_factory"
          ]
        },
        {
          "name": "clear_manager_cache",
          "args": []
        }
      ]
    },
    "database\\sqlalchemy\\core\\register_managers.py": {
      "path": "database\\sqlalchemy\\core\\register_managers.py",
      "classes": [],
      "functions": [
        {
          "name": "register_all_specialized_managers",
          "args": []
        }
      ]
    },
    "database\\sqlalchemy\\core\\__init__.py": {
      "path": "database\\sqlalchemy\\core\\__init__.py",
      "classes": [],
      "functions": []
    },
    "database\\sqlalchemy\\managers\\incoming_goods_manager.py": {
      "path": "database\\sqlalchemy\\managers\\incoming_goods_manager.py",
      "classes": [
        {
          "name": "IncomingGoodsManager",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self"
              ]
            },
            {
              "name": "create_order",
              "args": [
                "self",
                "data"
              ]
            },
            {
              "name": "get_all_orders",
              "args": [
                "self"
              ]
            },
            {
              "name": "get_order_by_id",
              "args": [
                "self",
                "order_id"
              ]
            },
            {
              "name": "get_order_by_number",
              "args": [
                "self",
                "order_number"
              ]
            },
            {
              "name": "update_order",
              "args": [
                "self",
                "order_id",
                "data"
              ]
            },
            {
              "name": "delete_order",
              "args": [
                "self",
                "order_id"
              ]
            },
            {
              "name": "add_order_detail",
              "args": [
                "self",
                "order_id",
                "data"
              ]
            },
            {
              "name": "get_order_details",
              "args": [
                "self",
                "order_id"
              ]
            },
            {
              "name": "update_order_detail",
              "args": [
                "self",
                "detail_id",
                "data"
              ]
            },
            {
              "name": "delete_order_detail",
              "args": [
                "self",
                "detail_id"
              ]
            },
            {
              "name": "get_suppliers",
              "args": [
                "self"
              ]
            },
            {
              "name": "update_inventory",
              "args": [
                "self",
                "unique_id",
                "amount",
                "is_shelf"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "database\\sqlalchemy\\managers\\inventory_manager.py": {
      "path": "database\\sqlalchemy\\managers\\inventory_manager.py",
      "classes": [
        {
          "name": "InventoryManager",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "session_factory"
              ]
            },
            {
              "name": "add_part",
              "args": [
                "self",
                "data"
              ]
            },
            {
              "name": "add_leather",
              "args": [
                "self",
                "data"
              ]
            },
            {
              "name": "update_part_stock",
              "args": [
                "self",
                "part_id",
                "quantity_change",
                "transaction_type",
                "notes"
              ]
            },
            {
              "name": "update_leather_stock",
              "args": [
                "self",
                "leather_id",
                "area_change",
                "transaction_type",
                "notes"
              ]
            },
            {
              "name": "get_part_with_transactions",
              "args": [
                "self",
                "part_id"
              ]
            },
            {
              "name": "get_leather_with_transactions",
              "args": [
                "self",
                "leather_id"
              ]
            },
            {
              "name": "get_low_stock_parts",
              "args": [
                "self",
                "include_out_of_stock"
              ]
            },
            {
              "name": "get_low_stock_leather",
              "args": [
                "self",
                "include_out_of_stock"
              ]
            },
            {
              "name": "get_inventory_transactions",
              "args": [
                "self",
                "part_id",
                "leather_id",
                "start_date",
                "end_date"
              ]
            },
            {
              "name": "get_inventory_value",
              "args": [
                "self"
              ]
            },
            {
              "name": "search_inventory",
              "args": [
                "self",
                "search_term"
              ]
            },
            {
              "name": "adjust_min_stock_levels",
              "args": [
                "self",
                "part_id",
                "new_min_level"
              ]
            },
            {
              "name": "adjust_min_leather_area",
              "args": [
                "self",
                "leather_id",
                "new_min_area"
              ]
            },
            {
              "name": "get_inventory_summary",
              "args": [
                "self"
              ]
            },
            {
              "name": "bulk_update_parts",
              "args": [
                "self",
                "updates"
              ]
            },
            {
              "name": "bulk_update_leather",
              "args": [
                "self",
                "updates"
              ]
            },
            {
              "name": "get_transaction_history",
              "args": [
                "self",
                "start_date",
                "end_date",
                "transaction_type"
              ]
            },
            {
              "name": "get_part_stock_history",
              "args": [
                "self",
                "part_id",
                "days"
              ]
            },
            {
              "name": "get_leather_stock_history",
              "args": [
                "self",
                "leather_id",
                "days"
              ]
            },
            {
              "name": "get_reorder_suggestions",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "database\\sqlalchemy\\managers\\leather_inventory_manager.py": {
      "path": "database\\sqlalchemy\\managers\\leather_inventory_manager.py",
      "classes": [
        {
          "name": "LeatherInventoryManager",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "session_factory"
              ]
            },
            {
              "name": "add_leather",
              "args": [
                "self",
                "data"
              ]
            },
            {
              "name": "update_leather_area",
              "args": [
                "self",
                "leather_id",
                "area_change",
                "transaction_type",
                "notes",
                "wastage"
              ]
            },
            {
              "name": "get_leather_with_transactions",
              "args": [
                "self",
                "leather_id",
                "include_wastage"
              ]
            },
            {
              "name": "get_low_stock_leather",
              "args": [
                "self",
                "include_out_of_stock",
                "supplier_id"
              ]
            },
            {
              "name": "calculate_leather_efficiency",
              "args": [
                "self",
                "leather_id",
                "date_range"
              ]
            },
            {
              "name": "adjust_minimum_area",
              "args": [
                "self",
                "leather_id",
                "new_minimum"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "database\\sqlalchemy\\managers\\order_manager.py": {
      "path": "database\\sqlalchemy\\managers\\order_manager.py",
      "classes": [
        {
          "name": "OrderManager",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "session_factory"
              ]
            },
            {
              "name": "create_order",
              "args": [
                "self",
                "order_data",
                "items"
              ]
            },
            {
              "name": "get_order_with_items",
              "args": [
                "self",
                "order_id"
              ]
            },
            {
              "name": "update_order_status",
              "args": [
                "self",
                "order_id",
                "status"
              ]
            },
            {
              "name": "add_order_items",
              "args": [
                "self",
                "order_id",
                "items"
              ]
            },
            {
              "name": "remove_order_item",
              "args": [
                "self",
                "order_id",
                "item_id"
              ]
            },
            {
              "name": "search_orders",
              "args": [
                "self",
                "search_term"
              ]
            },
            {
              "name": "get_orders_by_date_range",
              "args": [
                "self",
                "start_date",
                "end_date"
              ]
            },
            {
              "name": "get_supplier_orders",
              "args": [
                "self",
                "supplier_id"
              ]
            },
            {
              "name": "calculate_order_total",
              "args": [
                "self",
                "order_id"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "database\\sqlalchemy\\managers\\production_order_manager.py": {
      "path": "database\\sqlalchemy\\managers\\production_order_manager.py",
      "classes": [
        {
          "name": "ProductionOrderManager",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "session_factory"
              ]
            },
            {
              "name": "create_production_order",
              "args": [
                "self",
                "recipe_id",
                "quantity",
                "start_date",
                "notes"
              ]
            },
            {
              "name": "start_production",
              "args": [
                "self",
                "order_id",
                "operator_notes"
              ]
            },
            {
              "name": "_reserve_materials",
              "args": [
                "self",
                "session",
                "order"
              ]
            },
            {
              "name": "complete_item",
              "args": [
                "self",
                "order_id",
                "serial_number",
                "quality_check_passed",
                "notes"
              ]
            },
            {
              "name": "get_production_status",
              "args": [
                "self",
                "order_id"
              ]
            },
            {
              "name": "get_active_orders",
              "args": [
                "self"
              ]
            },
            {
              "name": "get_production_metrics",
              "args": [
                "self",
                "start_date",
                "end_date"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "database\\sqlalchemy\\managers\\recipe_manager.py": {
      "path": "database\\sqlalchemy\\managers\\recipe_manager.py",
      "classes": [
        {
          "name": "RecipeManager",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "session_factory"
              ]
            },
            {
              "name": "create_recipe",
              "args": [
                "self",
                "recipe_data",
                "items"
              ]
            },
            {
              "name": "get_recipe_with_items",
              "args": [
                "self",
                "recipe_id"
              ]
            },
            {
              "name": "update_recipe_items",
              "args": [
                "self",
                "recipe_id",
                "items"
              ]
            },
            {
              "name": "add_recipe_item",
              "args": [
                "self",
                "recipe_id",
                "item_data"
              ]
            },
            {
              "name": "remove_recipe_item",
              "args": [
                "self",
                "recipe_id",
                "item_id"
              ]
            },
            {
              "name": "update_recipe_item_quantity",
              "args": [
                "self",
                "recipe_id",
                "item_id",
                "quantity"
              ]
            },
            {
              "name": "check_materials_availability",
              "args": [
                "self",
                "recipe_id",
                "quantity"
              ]
            },
            {
              "name": "get_recipes_by_type",
              "args": [
                "self",
                "recipe_type"
              ]
            },
            {
              "name": "get_recipes_by_collection",
              "args": [
                "self",
                "collection"
              ]
            },
            {
              "name": "search_recipes",
              "args": [
                "self",
                "search_term"
              ]
            },
            {
              "name": "duplicate_recipe",
              "args": [
                "self",
                "recipe_id",
                "new_name"
              ]
            },
            {
              "name": "calculate_recipe_cost",
              "args": [
                "self",
                "recipe_id"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "database\\sqlalchemy\\managers\\report_manager.py": {
      "path": "database\\sqlalchemy\\managers\\report_manager.py",
      "classes": [
        {
          "name": "ReportManager",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "session"
              ]
            },
            {
              "name": "generate_report",
              "args": [
                "self",
                "report_type",
                "filters"
              ]
            },
            {
              "name": "generate_inventory_report",
              "args": [
                "self",
                "filters"
              ]
            },
            {
              "name": "generate_products_report",
              "args": [
                "self",
                "filters"
              ]
            },
            {
              "name": "generate_low_stock_report",
              "args": [
                "self",
                "filters"
              ]
            },
            {
              "name": "generate_recipe_usage_report",
              "args": [
                "self",
                "filters"
              ]
            },
            {
              "name": "export_to_csv",
              "args": [
                "self",
                "df",
                "filename"
              ]
            },
            {
              "name": "export_to_excel",
              "args": [
                "self",
                "df",
                "filename"
              ]
            },
            {
              "name": "export_to_pdf",
              "args": [
                "self",
                "df",
                "filename"
              ]
            }
          ],
          "base_classes": [
            "BaseManager"
          ]
        },
        {
          "name": "ReportDialog",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "parent",
                "title"
              ]
            },
            {
              "name": "setup_ui",
              "args": [
                "self"
              ]
            },
            {
              "name": "on_report_type_change",
              "args": [
                "self",
                "event"
              ]
            },
            {
              "name": "_add_filter",
              "args": [
                "self",
                "name",
                "label",
                "widget_type"
              ]
            },
            {
              "name": "get_filters",
              "args": [
                "self"
              ]
            },
            {
              "name": "generate_report",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": [
            "BaseDialog"
          ]
        }
      ],
      "functions": []
    },
    "database\\sqlalchemy\\managers\\shopping_list_manager.py": {
      "path": "database\\sqlalchemy\\managers\\shopping_list_manager.py",
      "classes": [
        {
          "name": "ShoppingListManager",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "session_factory"
              ]
            },
            {
              "name": "create_shopping_list",
              "args": [
                "self",
                "data",
                "items"
              ]
            },
            {
              "name": "get_shopping_list_with_items",
              "args": [
                "self",
                "list_id"
              ]
            },
            {
              "name": "add_shopping_list_item",
              "args": [
                "self",
                "list_id",
                "item_data"
              ]
            },
            {
              "name": "update_shopping_list_status",
              "args": [
                "self",
                "list_id",
                "status"
              ]
            },
            {
              "name": "mark_item_purchased",
              "args": [
                "self",
                "list_id",
                "item_id",
                "purchase_data"
              ]
            },
            {
              "name": "get_pending_items",
              "args": [
                "self"
              ]
            },
            {
              "name": "get_items_by_supplier",
              "args": [
                "self",
                "supplier_id"
              ]
            },
            {
              "name": "get_shopping_list_summary",
              "args": [
                "self",
                "list_id"
              ]
            },
            {
              "name": "search_shopping_lists",
              "args": [
                "self",
                "search_term"
              ]
            },
            {
              "name": "filter_shopping_lists",
              "args": [
                "self",
                "status",
                "priority",
                "date_range"
              ]
            },
            {
              "name": "bulk_update_items",
              "args": [
                "self",
                "updates",
                "list_id"
              ]
            },
            {
              "name": "merge_shopping_lists",
              "args": [
                "self",
                "source_ids",
                "target_id"
              ]
            },
            {
              "name": "get_overdue_items",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "database\\sqlalchemy\\managers\\storage_manager.py": {
      "path": "database\\sqlalchemy\\managers\\storage_manager.py",
      "classes": [
        {
          "name": "StorageManager",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "session_factory"
              ]
            },
            {
              "name": "get_all_storage_locations",
              "args": [
                "self"
              ]
            },
            {
              "name": "add_storage_location",
              "args": [
                "self",
                "data"
              ]
            },
            {
              "name": "update_storage_location",
              "args": [
                "self",
                "location_id",
                "data"
              ]
            },
            {
              "name": "delete_storage_location",
              "args": [
                "self",
                "location_id"
              ]
            },
            {
              "name": "get_storage_with_items",
              "args": [
                "self",
                "storage_id"
              ]
            },
            {
              "name": "get_available_storage",
              "args": [
                "self"
              ]
            },
            {
              "name": "search_storage",
              "args": [
                "self",
                "term"
              ]
            },
            {
              "name": "get_storage_status",
              "args": [
                "self",
                "storage_id"
              ]
            },
            {
              "name": "get_storage_utilization",
              "args": [
                "self"
              ]
            },
            {
              "name": "bulk_update_storage",
              "args": [
                "self",
                "updates"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "database\\sqlalchemy\\managers\\supplier_manager.py": {
      "path": "database\\sqlalchemy\\managers\\supplier_manager.py",
      "classes": [
        {
          "name": "SupplierManager",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "session_factory"
              ]
            },
            {
              "name": "create_supplier",
              "args": [
                "self",
                "data"
              ]
            },
            {
              "name": "update_supplier",
              "args": [
                "self",
                "supplier_id",
                "data"
              ]
            },
            {
              "name": "get_supplier_with_orders",
              "args": [
                "self",
                "supplier_id"
              ]
            },
            {
              "name": "get_supplier_products",
              "args": [
                "self",
                "supplier_id"
              ]
            },
            {
              "name": "get_supplier_performance",
              "args": [
                "self",
                "supplier_id"
              ]
            },
            {
              "name": "update_supplier_rating",
              "args": [
                "self",
                "supplier_id",
                "rating",
                "notes"
              ]
            },
            {
              "name": "get_supplier_order_history",
              "args": [
                "self",
                "supplier_id",
                "start_date",
                "end_date"
              ]
            },
            {
              "name": "get_top_suppliers",
              "args": [
                "self",
                "limit"
              ]
            },
            {
              "name": "get_supplier_categories",
              "args": [
                "self",
                "supplier_id"
              ]
            },
            {
              "name": "search_suppliers",
              "args": [
                "self",
                "search_term"
              ]
            },
            {
              "name": "get_supplier_statistics",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "database\\sqlalchemy\\managers\\__init__.py": {
      "path": "database\\sqlalchemy\\managers\\__init__.py",
      "classes": [],
      "functions": []
    },
    "database\\sqlalchemy\\migrations\\manager.py": {
      "path": "database\\sqlalchemy\\migrations\\manager.py",
      "classes": [
        {
          "name": "MigrationManager",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "database_url",
                "migrations_path"
              ]
            },
            {
              "name": "_create_alembic_config",
              "args": [
                "self"
              ]
            },
            {
              "name": "check_current_version",
              "args": [
                "self"
              ]
            },
            {
              "name": "get_pending_migrations",
              "args": [
                "self"
              ]
            },
            {
              "name": "create_backup",
              "args": [
                "self"
              ]
            },
            {
              "name": "run_migrations",
              "args": [
                "self",
                "target"
              ]
            },
            {
              "name": "revert_migration",
              "args": [
                "self",
                "revision"
              ]
            },
            {
              "name": "verify_migration",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "database\\sqlalchemy\\migrations\\migration_manager.py": {
      "path": "database\\sqlalchemy\\migrations\\migration_manager.py",
      "classes": [
        {
          "name": "MigrationCLI",
          "methods": [
            {
              "name": "create_migration",
              "args": [
                "message"
              ]
            },
            {
              "name": "upgrade",
              "args": [
                "revision"
              ]
            },
            {
              "name": "downgrade",
              "args": [
                "revision"
              ]
            }
          ],
          "base_classes": []
        },
        {
          "name": "MigrationTracker",
          "methods": [
            {
              "name": "get_current_version",
              "args": []
            }
          ],
          "base_classes": []
        }
      ],
      "functions": [
        {
          "name": "get_base_metadata",
          "args": []
        },
        {
          "name": "run_migrations_offline",
          "args": [
            "config",
            "target_metadata"
          ]
        },
        {
          "name": "run_migrations_online",
          "args": [
            "config",
            "target_metadata"
          ]
        },
        {
          "name": "main",
          "args": [
            "config_file"
          ]
        }
      ]
    },
    "database\\sqlalchemy\\migrations\\__init__.py": {
      "path": "database\\sqlalchemy\\migrations\\__init__.py",
      "classes": [],
      "functions": []
    },
    "database\\sqlalchemy\\mixins\\base_mixins.py": {
      "path": "database\\sqlalchemy\\mixins\\base_mixins.py",
      "classes": [
        {
          "name": "BaseMixin",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "model_class",
                "session_factory"
              ]
            }
          ],
          "base_classes": []
        },
        {
          "name": "SearchMixin",
          "methods": [
            {
              "name": "search",
              "args": [
                "self",
                "search_term",
                "fields"
              ]
            },
            {
              "name": "advanced_search",
              "args": [
                "self",
                "criteria"
              ]
            }
          ],
          "base_classes": []
        },
        {
          "name": "FilterMixin",
          "methods": [
            {
              "name": "filter_by_multiple",
              "args": [
                "self",
                "filters"
              ]
            },
            {
              "name": "filter_with_or",
              "args": [
                "self",
                "filters"
              ]
            },
            {
              "name": "filter_complex",
              "args": [
                "self",
                "conditions",
                "join_type"
              ]
            }
          ],
          "base_classes": []
        },
        {
          "name": "PaginationMixin",
          "methods": [
            {
              "name": "get_paginated",
              "args": [
                "self",
                "page",
                "page_size",
                "order_by",
                "filters"
              ]
            }
          ],
          "base_classes": []
        },
        {
          "name": "TransactionMixin",
          "methods": [
            {
              "name": "run_in_transaction",
              "args": [
                "self",
                "operation"
              ]
            },
            {
              "name": "execute_with_result",
              "args": [
                "self",
                "operation"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "database\\sqlalchemy\\mixins\\filter_mixin.py": {
      "path": "database\\sqlalchemy\\mixins\\filter_mixin.py",
      "classes": [
        {
          "name": "FilterMixin",
          "methods": [
            {
              "name": "filter_by_multiple",
              "args": [
                "self",
                "filters"
              ]
            },
            {
              "name": "filter_with_or",
              "args": [
                "self",
                "filters"
              ]
            },
            {
              "name": "filter_complex",
              "args": [
                "self",
                "conditions",
                "join_type"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "database\\sqlalchemy\\mixins\\paginated_query_mixin.py": {
      "path": "database\\sqlalchemy\\mixins\\paginated_query_mixin.py",
      "classes": [
        {
          "name": "PaginatedQueryMixin",
          "methods": [
            {
              "name": "get_paginated",
              "args": [
                "self",
                "page",
                "page_size",
                "order_by",
                "filters"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "database\\sqlalchemy\\mixins\\search_mixin.py": {
      "path": "database\\sqlalchemy\\mixins\\search_mixin.py",
      "classes": [
        {
          "name": "SearchMixin",
          "methods": [
            {
              "name": "search",
              "args": [
                "self",
                "search_term",
                "fields"
              ]
            },
            {
              "name": "advanced_search",
              "args": [
                "self",
                "criteria"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "database\\sqlalchemy\\mixins\\test_mixin.py": {
      "path": "database\\sqlalchemy\\mixins\\test_mixin.py",
      "classes": [
        {
          "name": "TestModel",
          "methods": [],
          "base_classes": [
            "TestBase"
          ]
        },
        {
          "name": "TestModelManager",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "model_class",
                "session_factory"
              ]
            }
          ],
          "base_classes": [
            "SearchMixin",
            "FilterMixin",
            "PaginationMixin",
            "TransactionMixin"
          ]
        },
        {
          "name": "TestSearchMixin",
          "methods": [
            {
              "name": "test_basic_search",
              "args": [
                "self",
                "test_manager",
                "sample_data"
              ]
            },
            {
              "name": "test_advanced_search",
              "args": [
                "self",
                "test_manager",
                "sample_data"
              ]
            }
          ],
          "base_classes": []
        },
        {
          "name": "TestFilterMixin",
          "methods": [
            {
              "name": "test_filter_by_multiple",
              "args": [
                "self",
                "test_manager",
                "sample_data"
              ]
            },
            {
              "name": "test_filter_with_or",
              "args": [
                "self",
                "test_manager",
                "sample_data"
              ]
            },
            {
              "name": "test_filter_complex",
              "args": [
                "self",
                "test_manager",
                "sample_data"
              ]
            }
          ],
          "base_classes": []
        },
        {
          "name": "TestPaginationMixin",
          "methods": [
            {
              "name": "test_pagination_basic",
              "args": [
                "self",
                "test_manager",
                "session_factory"
              ]
            },
            {
              "name": "test_pagination_with_filters",
              "args": [
                "self",
                "test_manager",
                "sample_data"
              ]
            }
          ],
          "base_classes": []
        },
        {
          "name": "TestTransactionMixin",
          "methods": [
            {
              "name": "test_run_in_transaction_success",
              "args": [
                "self",
                "test_manager"
              ]
            },
            {
              "name": "test_run_in_transaction_rollback",
              "args": [
                "self",
                "test_manager"
              ]
            },
            {
              "name": "test_execute_with_result",
              "args": [
                "self",
                "test_manager"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": [
        {
          "name": "test_engine",
          "args": []
        },
        {
          "name": "session_factory",
          "args": [
            "test_engine"
          ]
        },
        {
          "name": "test_manager",
          "args": [
            "session_factory"
          ]
        },
        {
          "name": "sample_data",
          "args": [
            "test_manager"
          ]
        }
      ]
    },
    "database\\sqlalchemy\\mixins\\test_mixin_perormance.py": {
      "path": "database\\sqlalchemy\\mixins\\test_mixin_perormance.py",
      "classes": [
        {
          "name": "PerformanceTestModel",
          "methods": [],
          "base_classes": [
            "TestBase"
          ]
        },
        {
          "name": "PerformanceTestManager",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "model_class",
                "session_factory"
              ]
            }
          ],
          "base_classes": [
            "SearchMixin",
            "FilterMixin",
            "PaginationMixin"
          ]
        },
        {
          "name": "TestMixinPerformance",
          "methods": [
            {
              "name": "test_search_performance",
              "args": [
                "self",
                "performance_manager",
                "large_dataset"
              ]
            },
            {
              "name": "test_advanced_search_performance",
              "args": [
                "self",
                "performance_manager",
                "large_dataset"
              ]
            },
            {
              "name": "test_filter_performance",
              "args": [
                "self",
                "performance_manager",
                "large_dataset"
              ]
            },
            {
              "name": "test_pagination_performance",
              "args": [
                "self",
                "performance_manager",
                "large_dataset"
              ]
            },
            {
              "name": "test_complex_filter_performance",
              "args": [
                "self",
                "performance_manager",
                "large_dataset"
              ]
            },
            {
              "name": "test_native_sqlalchemy_performance_comparison",
              "args": [
                "self",
                "performance_manager",
                "large_dataset"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": [
        {
          "name": "test_engine",
          "args": []
        },
        {
          "name": "session_factory",
          "args": [
            "test_engine"
          ]
        },
        {
          "name": "performance_manager",
          "args": [
            "session_factory"
          ]
        },
        {
          "name": "large_dataset",
          "args": [
            "performance_manager"
          ]
        }
      ]
    },
    "database\\sqlalchemy\\mixins\\transaction_mixin.py": {
      "path": "database\\sqlalchemy\\mixins\\transaction_mixin.py",
      "classes": [
        {
          "name": "TransactionMixin",
          "methods": [
            {
              "name": "run_in_transaction",
              "args": [
                "self"
              ]
            },
            {
              "name": "execute_with_result",
              "args": [
                "self",
                "operation"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "database\\sqlalchemy\\mixins\\__init__.py": {
      "path": "database\\sqlalchemy\\mixins\\__init__.py",
      "classes": [],
      "functions": []
    },
    "database\\sqlalchemy\\migrations\\versions\\202402201_add_relationships.py": {
      "path": "database\\sqlalchemy\\migrations\\versions\\202402201_add_relationships.py",
      "classes": [],
      "functions": [
        {
          "name": "upgrade",
          "args": []
        },
        {
          "name": "downgrade",
          "args": []
        }
      ]
    },
    "database\\sqlalchemy\\migrations\\versions\\463698485_comprehensive_model_relationships.py": {
      "path": "database\\sqlalchemy\\migrations\\versions\\463698485_comprehensive_model_relationships.py",
      "classes": [],
      "functions": [
        {
          "name": "upgrade",
          "args": []
        },
        {
          "name": "downgrade",
          "args": []
        }
      ]
    },
    "database\\sqlalchemy\\migrations\\versions\\__init__.py": {
      "path": "database\\sqlalchemy\\migrations\\versions\\__init__.py",
      "classes": [],
      "functions": []
    },
    "database\\sqlalchemy\\core\\specialized\\leather_manager.py": {
      "path": "database\\sqlalchemy\\core\\specialized\\leather_manager.py",
      "classes": [
        {
          "name": "LeatherManager",
          "methods": [
            {
              "name": "get_leather_with_transactions",
              "args": [
                "self",
                "leather_id"
              ]
            },
            {
              "name": "update_leather_area",
              "args": [
                "self",
                "leather_id",
                "area_change",
                "transaction_type",
                "notes",
                "wastage"
              ]
            },
            {
              "name": "get_low_stock_leather",
              "args": [
                "self",
                "include_out_of_stock",
                "supplier_id"
              ]
            },
            {
              "name": "get_by_supplier",
              "args": [
                "self",
                "supplier_id"
              ]
            }
          ],
          "base_classes": [
            "BaseManager"
          ]
        }
      ],
      "functions": []
    },
    "database\\sqlalchemy\\core\\specialized\\order_manager.py": {
      "path": "database\\sqlalchemy\\core\\specialized\\order_manager.py",
      "classes": [
        {
          "name": "OrderManager",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "session_factory"
              ]
            },
            {
              "name": "create_order",
              "args": [
                "self",
                "order_data"
              ]
            },
            {
              "name": "get_order_by_id",
              "args": [
                "self",
                "order_id"
              ]
            },
            {
              "name": "get_all_orders",
              "args": [
                "self"
              ]
            }
          ],
          "base_classes": [
            "BaseManager"
          ]
        }
      ],
      "functions": []
    },
    "database\\sqlalchemy\\core\\specialized\\part_manager.py": {
      "path": "database\\sqlalchemy\\core\\specialized\\part_manager.py",
      "classes": [
        {
          "name": "PartManager",
          "methods": [
            {
              "name": "get_part_with_transactions",
              "args": [
                "self",
                "part_id"
              ]
            },
            {
              "name": "update_part_stock",
              "args": [
                "self",
                "part_id",
                "quantity_change",
                "transaction_type",
                "notes"
              ]
            },
            {
              "name": "get_low_stock_parts",
              "args": [
                "self",
                "include_out_of_stock"
              ]
            },
            {
              "name": "get_by_supplier",
              "args": [
                "self",
                "supplier_id"
              ]
            }
          ],
          "base_classes": [
            "BaseManager"
          ]
        }
      ],
      "functions": []
    },
    "database\\sqlalchemy\\core\\specialized\\product_manager.py": {
      "path": "database\\sqlalchemy\\core\\specialized\\product_manager.py",
      "classes": [
        {
          "name": "ProductManager",
          "methods": [
            {
              "name": "get_product_with_recipe",
              "args": [
                "self",
                "product_id"
              ]
            },
            {
              "name": "get_by_storage",
              "args": [
                "self",
                "storage_id"
              ]
            },
            {
              "name": "assign_to_storage",
              "args": [
                "self",
                "product_id",
                "storage_id"
              ]
            },
            {
              "name": "search_by_name",
              "args": [
                "self",
                "name"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "database\\sqlalchemy\\core\\specialized\\recipe_manager.py": {
      "path": "database\\sqlalchemy\\core\\specialized\\recipe_manager.py",
      "classes": [
        {
          "name": "RecipeManager",
          "methods": [
            {
              "name": "get_recipe_with_items",
              "args": [
                "self",
                "recipe_id"
              ]
            },
            {
              "name": "create_recipe",
              "args": [
                "self",
                "recipe_data",
                "items"
              ]
            },
            {
              "name": "update_recipe_items",
              "args": [
                "self",
                "recipe_id",
                "items"
              ]
            },
            {
              "name": "add_recipe_item",
              "args": [
                "self",
                "recipe_id",
                "item_data"
              ]
            },
            {
              "name": "check_materials_availability",
              "args": [
                "self",
                "recipe_id",
                "quantity"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "database\\sqlalchemy\\core\\specialized\\shopping_list_manager.py": {
      "path": "database\\sqlalchemy\\core\\specialized\\shopping_list_manager.py",
      "classes": [
        {
          "name": "ShoppingListManager",
          "methods": [
            {
              "name": "get_shopping_list_with_items",
              "args": [
                "self",
                "list_id"
              ]
            },
            {
              "name": "create_shopping_list",
              "args": [
                "self",
                "data",
                "items"
              ]
            },
            {
              "name": "add_shopping_list_item",
              "args": [
                "self",
                "list_id",
                "item_data"
              ]
            },
            {
              "name": "mark_item_purchased",
              "args": [
                "self",
                "item_id",
                "purchase_data"
              ]
            },
            {
              "name": "get_pending_items",
              "args": [
                "self"
              ]
            },
            {
              "name": "get_items_by_supplier",
              "args": [
                "self",
                "supplier_id"
              ]
            },
            {
              "name": "get_shopping_list_summary",
              "args": [
                "self",
                "list_id"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "database\\sqlalchemy\\core\\specialized\\storage_manager.py": {
      "path": "database\\sqlalchemy\\core\\specialized\\storage_manager.py",
      "classes": [
        {
          "name": "StorageManager",
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "session_factory"
              ]
            }
          ],
          "base_classes": [
            "BaseManager"
          ]
        }
      ],
      "functions": []
    },
    "database\\sqlalchemy\\core\\specialized\\supplier_manager.py": {
      "path": "database\\sqlalchemy\\core\\specialized\\supplier_manager.py",
      "classes": [
        {
          "name": "SupplierManager",
          "methods": [
            {
              "name": "get_supplier_with_orders",
              "args": [
                "self",
                "supplier_id"
              ]
            },
            {
              "name": "get_supplier_products",
              "args": [
                "self",
                "supplier_id"
              ]
            },
            {
              "name": "get_supplier_order_history",
              "args": [
                "self",
                "supplier_id",
                "start_date",
                "end_date"
              ]
            },
            {
              "name": "update_supplier_rating",
              "args": [
                "self",
                "supplier_id",
                "rating",
                "notes"
              ]
            },
            {
              "name": "search_suppliers",
              "args": [
                "self",
                "term"
              ]
            }
          ],
          "base_classes": []
        }
      ],
      "functions": []
    },
    "database\\sqlalchemy\\core\\specialized\\__init__.py": {
      "path": "database\\sqlalchemy\\core\\specialized\\__init__.py",
      "classes": [],
      "functions": []
    }
  }
}